# coding: utf-8

"""
    Notifications API

    Notifications API  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Params(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[str]',
        'url': 'str',
        'method': 'str',
        'retries': 'int',
        'content_type': 'str'
    }

    attribute_map = {
        'addresses': 'addresses',
        'url': 'url',
        'method': 'method',
        'retries': 'retries',
        'content_type': 'content_type'
    }

    def __init__(self, addresses=None, url=None, method=None, retries=None, content_type=None):  # noqa: E501
        """Params - a model defined in Swagger"""  # noqa: E501

        self._addresses = None
        self._url = None
        self._method = None
        self._retries = None
        self._content_type = None
        self.discriminator = None

        if addresses is not None:
            self.addresses = addresses
        if url is not None:
            self.url = url
        if method is not None:
            self.method = method
        if retries is not None:
            self.retries = retries
        if content_type is not None:
            self.content_type = content_type

    @property
    def addresses(self):
        """Gets the addresses of this Params.  # noqa: E501

        [required] #email;  E-mail addresses   # noqa: E501

        :return: The addresses of this Params.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Params.

        [required] #email;  E-mail addresses   # noqa: E501

        :param addresses: The addresses of this Params.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def url(self):
        """Gets the url of this Params.  # noqa: E501

        [required] #webhook;  Webhook URL   # noqa: E501

        :return: The url of this Params.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Params.

        [required] #webhook;  Webhook URL   # noqa: E501

        :param url: The url of this Params.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def method(self):
        """Gets the method of this Params.  # noqa: E501

        [optional] #webhook;  HTTP method; default: POST (GET, POST)   # noqa: E501

        :return: The method of this Params.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Params.

        [optional] #webhook;  HTTP method; default: POST (GET, POST)   # noqa: E501

        :param method: The method of this Params.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def retries(self):
        """Gets the retries of this Params.  # noqa: E501

        [optional] #webhook;  Number of retries before forgetting the notification; default: 0   # noqa: E501

        :return: The retries of this Params.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this Params.

        [optional] #webhook;  Number of retries before forgetting the notification; default: 0   # noqa: E501

        :param retries: The retries of this Params.  # noqa: E501
        :type: int
        """

        self._retries = retries

    @property
    def content_type(self):
        """Gets the content_type of this Params.  # noqa: E501

        [optional] #webhook; default: application/json (application/json, application/x-www-form-urlencoded)   # noqa: E501

        :return: The content_type of this Params.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Params.

        [optional] #webhook; default: application/json (application/json, application/x-www-form-urlencoded)   # noqa: E501

        :param content_type: The content_type of this Params.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Params):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
