# coding: utf-8

"""
    Flip API

    Description

    OpenAPI spec version: 3.1.0
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Video(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'audio_bitrate': 'int',
        'audio_channels': 'int',
        'audio_codec': 'str',
        'audio_sample_rate': 'int',
        'created_at': 'str',
        'duration': 'int',
        'encodings_count': 'int',
        'error_class': 'str',
        'error_message': 'str',
        'extname': 'str',
        'file_size': 'int',
        'fps': 'str',
        'height': 'str',
        'width': 'str',
        'mime_type': 'str',
        'original_filename': 'str',
        'path': 'str',
        'payload': 'str',
        'source_url': 'str',
        'status': 'str',
        'updated_at': 'str',
        'video_bitrate': 'str',
        'video_codec': 'str'
    }

    attribute_map = {
        'id': 'id',
        'audio_bitrate': 'audio_bitrate',
        'audio_channels': 'audio_channels',
        'audio_codec': 'audio_codec',
        'audio_sample_rate': 'audio_sample_rate',
        'created_at': 'created_at',
        'duration': 'duration',
        'encodings_count': 'encodings_count',
        'error_class': 'error_class',
        'error_message': 'error_message',
        'extname': 'extname',
        'file_size': 'file_size',
        'fps': 'fps',
        'height': 'height',
        'width': 'width',
        'mime_type': 'mime_type',
        'original_filename': 'original_filename',
        'path': 'path',
        'payload': 'payload',
        'source_url': 'source_url',
        'status': 'status',
        'updated_at': 'updated_at',
        'video_bitrate': 'video_bitrate',
        'video_codec': 'video_codec'
    }

    def __init__(self, id=None, audio_bitrate=None, audio_channels=None, audio_codec=None, audio_sample_rate=None, created_at=None, duration=None, encodings_count=None, error_class=None, error_message=None, extname=None, file_size=None, fps=None, height=None, width=None, mime_type=None, original_filename=None, path=None, payload=None, source_url=None, status=None, updated_at=None, video_bitrate=None, video_codec=None):
        """
        Video - a model defined in Swagger
        """

        self._id = None
        self._audio_bitrate = None
        self._audio_channels = None
        self._audio_codec = None
        self._audio_sample_rate = None
        self._created_at = None
        self._duration = None
        self._encodings_count = None
        self._error_class = None
        self._error_message = None
        self._extname = None
        self._file_size = None
        self._fps = None
        self._height = None
        self._width = None
        self._mime_type = None
        self._original_filename = None
        self._path = None
        self._payload = None
        self._source_url = None
        self._status = None
        self._updated_at = None
        self._video_bitrate = None
        self._video_codec = None

        if id is not None:
          self.id = id
        if audio_bitrate is not None:
          self.audio_bitrate = audio_bitrate
        if audio_channels is not None:
          self.audio_channels = audio_channels
        if audio_codec is not None:
          self.audio_codec = audio_codec
        if audio_sample_rate is not None:
          self.audio_sample_rate = audio_sample_rate
        if created_at is not None:
          self.created_at = created_at
        if duration is not None:
          self.duration = duration
        if encodings_count is not None:
          self.encodings_count = encodings_count
        if error_class is not None:
          self.error_class = error_class
        if error_message is not None:
          self.error_message = error_message
        if extname is not None:
          self.extname = extname
        if file_size is not None:
          self.file_size = file_size
        if fps is not None:
          self.fps = fps
        if height is not None:
          self.height = height
        if width is not None:
          self.width = width
        if mime_type is not None:
          self.mime_type = mime_type
        if original_filename is not None:
          self.original_filename = original_filename
        if path is not None:
          self.path = path
        if payload is not None:
          self.payload = payload
        if source_url is not None:
          self.source_url = source_url
        if status is not None:
          self.status = status
        if updated_at is not None:
          self.updated_at = updated_at
        if video_bitrate is not None:
          self.video_bitrate = video_bitrate
        if video_codec is not None:
          self.video_codec = video_codec

    @property
    def id(self):
        """
        Gets the id of this Video.
        A unique identifier of the Video.

        :return: The id of this Video.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Video.
        A unique identifier of the Video.

        :param id: The id of this Video.
        :type: str
        """

        self._id = id

    @property
    def audio_bitrate(self):
        """
        Gets the audio_bitrate of this Video.
        audio bitrate (in bits/s)

        :return: The audio_bitrate of this Video.
        :rtype: int
        """
        return self._audio_bitrate

    @audio_bitrate.setter
    def audio_bitrate(self, audio_bitrate):
        """
        Sets the audio_bitrate of this Video.
        audio bitrate (in bits/s)

        :param audio_bitrate: The audio_bitrate of this Video.
        :type: int
        """

        self._audio_bitrate = audio_bitrate

    @property
    def audio_channels(self):
        """
        Gets the audio_channels of this Video.
        A number of audio channels.

        :return: The audio_channels of this Video.
        :rtype: int
        """
        return self._audio_channels

    @audio_channels.setter
    def audio_channels(self, audio_channels):
        """
        Sets the audio_channels of this Video.
        A number of audio channels.

        :param audio_channels: The audio_channels of this Video.
        :type: int
        """

        self._audio_channels = audio_channels

    @property
    def audio_codec(self):
        """
        Gets the audio_codec of this Video.
        A codec that has been used to encode audio streams.

        :return: The audio_codec of this Video.
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """
        Sets the audio_codec of this Video.
        A codec that has been used to encode audio streams.

        :param audio_codec: The audio_codec of this Video.
        :type: str
        """

        self._audio_codec = audio_codec

    @property
    def audio_sample_rate(self):
        """
        Gets the audio_sample_rate of this Video.
        A number of samples of audio carried per second.

        :return: The audio_sample_rate of this Video.
        :rtype: int
        """
        return self._audio_sample_rate

    @audio_sample_rate.setter
    def audio_sample_rate(self, audio_sample_rate):
        """
        Sets the audio_sample_rate of this Video.
        A number of samples of audio carried per second.

        :param audio_sample_rate: The audio_sample_rate of this Video.
        :type: int
        """

        self._audio_sample_rate = audio_sample_rate

    @property
    def created_at(self):
        """
        Gets the created_at of this Video.
        A date and time when the Video has been created.

        :return: The created_at of this Video.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Video.
        A date and time when the Video has been created.

        :param created_at: The created_at of this Video.
        :type: str
        """

        self._created_at = created_at

    @property
    def duration(self):
        """
        Gets the duration of this Video.
        A duration of the video in seconds.

        :return: The duration of this Video.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Video.
        A duration of the video in seconds.

        :param duration: The duration of this Video.
        :type: int
        """

        self._duration = duration

    @property
    def encodings_count(self):
        """
        Gets the encodings_count of this Video.
        A number of related Encoding objects.

        :return: The encodings_count of this Video.
        :rtype: int
        """
        return self._encodings_count

    @encodings_count.setter
    def encodings_count(self, encodings_count):
        """
        Sets the encodings_count of this Video.
        A number of related Encoding objects.

        :param encodings_count: The encodings_count of this Video.
        :type: int
        """

        self._encodings_count = encodings_count

    @property
    def error_class(self):
        """
        Gets the error_class of this Video.
        A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to `fail`.

        :return: The error_class of this Video.
        :rtype: str
        """
        return self._error_class

    @error_class.setter
    def error_class(self, error_class):
        """
        Sets the error_class of this Video.
        A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to `fail`.

        :param error_class: The error_class of this Video.
        :type: str
        """

        self._error_class = error_class

    @property
    def error_message(self):
        """
        Gets the error_message of this Video.
        A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to `fail`.

        :return: The error_message of this Video.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this Video.
        A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to `fail`.

        :param error_message: The error_message of this Video.
        :type: str
        """

        self._error_message = error_message

    @property
    def extname(self):
        """
        Gets the extname of this Video.
        Extension of the source file.

        :return: The extname of this Video.
        :rtype: str
        """
        return self._extname

    @extname.setter
    def extname(self, extname):
        """
        Sets the extname of this Video.
        Extension of the source file.

        :param extname: The extname of this Video.
        :type: str
        """

        self._extname = extname

    @property
    def file_size(self):
        """
        Gets the file_size of this Video.
        A size of the source file.

        :return: The file_size of this Video.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """
        Sets the file_size of this Video.
        A size of the source file.

        :param file_size: The file_size of this Video.
        :type: int
        """

        self._file_size = file_size

    @property
    def fps(self):
        """
        Gets the fps of this Video.
        Number of frames per second.

        :return: The fps of this Video.
        :rtype: str
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """
        Sets the fps of this Video.
        Number of frames per second.

        :param fps: The fps of this Video.
        :type: str
        """

        self._fps = fps

    @property
    def height(self):
        """
        Gets the height of this Video.
        Height of the output video.

        :return: The height of this Video.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this Video.
        Height of the output video.

        :param height: The height of this Video.
        :type: str
        """

        self._height = height

    @property
    def width(self):
        """
        Gets the width of this Video.
        Width of the output video.

        :return: The width of this Video.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this Video.
        Width of the output video.

        :param width: The width of this Video.
        :type: str
        """

        self._width = width

    @property
    def mime_type(self):
        """
        Gets the mime_type of this Video.
        A mime type of the source file.

        :return: The mime_type of this Video.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """
        Sets the mime_type of this Video.
        A mime type of the source file.

        :param mime_type: The mime_type of this Video.
        :type: str
        """

        self._mime_type = mime_type

    @property
    def original_filename(self):
        """
        Gets the original_filename of this Video.
        A name of the source file.

        :return: The original_filename of this Video.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """
        Sets the original_filename of this Video.
        A name of the source file.

        :param original_filename: The original_filename of this Video.
        :type: str
        """

        self._original_filename = original_filename

    @property
    def path(self):
        """
        Gets the path of this Video.

        :return: The path of this Video.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Video.

        :param path: The path of this Video.
        :type: str
        """

        self._path = path

    @property
    def payload(self):
        """
        Gets the payload of this Video.

        :return: The payload of this Video.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this Video.

        :param payload: The payload of this Video.
        :type: str
        """

        self._payload = payload

    @property
    def source_url(self):
        """
        Gets the source_url of this Video.
        An URL pointing to the source file.

        :return: The source_url of this Video.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """
        Sets the source_url of this Video.
        An URL pointing to the source file.

        :param source_url: The source_url of this Video.
        :type: str
        """

        self._source_url = source_url

    @property
    def status(self):
        """
        Gets the status of this Video.
        Determines at what stage of importing process the Video is at the moment.

        :return: The status of this Video.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Video.
        Determines at what stage of importing process the Video is at the moment.

        :param status: The status of this Video.
        :type: str
        """

        self._status = status

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Video.
        A date and time when a Video has been updated last time.

        :return: The updated_at of this Video.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Video.
        A date and time when a Video has been updated last time.

        :param updated_at: The updated_at of this Video.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def video_bitrate(self):
        """
        Gets the video_bitrate of this Video.
        video bitrate (in bits/s)

        :return: The video_bitrate of this Video.
        :rtype: str
        """
        return self._video_bitrate

    @video_bitrate.setter
    def video_bitrate(self, video_bitrate):
        """
        Sets the video_bitrate of this Video.
        video bitrate (in bits/s)

        :param video_bitrate: The video_bitrate of this Video.
        :type: str
        """

        self._video_bitrate = video_bitrate

    @property
    def video_codec(self):
        """
        Gets the video_codec of this Video.
        A codec that has been used to encode the input file's video streams.

        :return: The video_codec of this Video.
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec):
        """
        Sets the video_codec of this Video.
        A codec that has been used to encode the input file's video streams.

        :param video_codec: The video_codec of this Video.
        :type: str
        """

        self._video_codec = video_codec

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Video):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
