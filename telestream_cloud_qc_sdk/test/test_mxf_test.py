# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import telestream_cloud_qc
from telestream_cloud_qc.models.mxf_test import MxfTest  # noqa: E501
from telestream_cloud_qc.rest import ApiException

class TestMxfTest(unittest.TestCase):
    """MxfTest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test MxfTest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = telestream_cloud_qc.models.mxf_test.MxfTest()  # noqa: E501
        if include_optional :
            return MxfTest(
                as11_uk_dpp_metadata_test = telestream_cloud_qc.models.as11_uk_dpp_metadata_test.as11_uk_dpp_metadata_test(
                    shim = 'DppAuto', 
                    reject_on_error = True, 
                    checked = True, ), 
                as11_xprofile_test = telestream_cloud_qc.models.as11_xprofile_test.as11_xprofile_test(
                    as11_rules = telestream_cloud_qc.models.as11_rules.as11_rules(
                        rule = [
                            '0'
                            ], ), 
                    embedded_xml_documents = 'EMBEDDED-XML-NONE', 
                    extra_audio_layout_modes = 'EXTRA-AUDIO-MODES-NONE', 
                    picture_essence_constraints = 'PIC-ESSENCE-CONSTRAINTS-NONE', 
                    file_format_specification_identification_label = 'FILE-FORMAT-SPEC-ID-NONE', 
                    reject_on_error = True, 
                    checked = True, ), 
                operational_pattern_test = telestream_cloud_qc.models.operational_pattern_test.operational_pattern_test(
                    op1a = True, 
                    op2a = True, 
                    op3a = True, 
                    op1b = True, 
                    op2b = True, 
                    op3b = True, 
                    op1c = True, 
                    op2c = True, 
                    op3c = True, 
                    external_essence = '0', 
                    non_streamable = '0', 
                    multi_track = '0', 
                    op_atom = True, 
                    multi_source = '0', 
                    multi_essence = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                version_test = telestream_cloud_qc.models.version_test.version_test(
                    mxf_version = 'SMPTE-377-2004', 
                    reject_on_error = True, 
                    checked = True, ), 
                kag_size_test = telestream_cloud_qc.models.kag_size_test.kag_size_test(
                    size = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                run_in_test = telestream_cloud_qc.models.run_in_test.run_in_test(
                    max_bytes = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                wrapping_type_test = telestream_cloud_qc.models.wrapping_type_test.wrapping_type_test(
                    wrapping = 'ClipWrapped', 
                    reject_on_error = True, 
                    checked = True, ), 
                source_package_timecode_test = telestream_cloud_qc.models.timecode_track_test.timecode_track_test(
                    require_continuous = True, 
                    drop_frame = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                material_package_timecode_test = telestream_cloud_qc.models.timecode_track_test.timecode_track_test(
                    require_continuous = True, 
                    drop_frame = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                sdti_timecode_continuity_test = telestream_cloud_qc.models.sdti_timecode_continuity_test.sdti_timecode_continuity_test(
                    reject_on_error = True, 
                    checked = True, ), 
                index_table_test = telestream_cloud_qc.models.index_table_test.index_table_test(
                    edit_rate_num = 56, 
                    edit_rate_denom = 56, 
                    duration_min = 56, 
                    duration_max = 56, 
                    e_ubyte_count_min = 56, 
                    e_ubyte_count_max = 56, 
                    e_ubyte_count_constant = True, 
                    slice_count = 56, 
                    single_index_location = '0', 
                    single_essence_location = '0', 
                    forward_index_direction = '0', 
                    index_entry_array = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                index_table_location_test = telestream_cloud_qc.models.location_test.location_test(
                    header = '0', 
                    body = '0', 
                    footer = '0', 
                    header_or_body_or_footer = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                header_partition_status_test = telestream_cloud_qc.models.partition_status_test.partition_status_test(
                    closed_complete = True, 
                    open_incomplete = True, 
                    closed_incomplete = True, 
                    open_complete = True, 
                    not_present = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                header_fill_test = telestream_cloud_qc.models.header_fill_test.header_fill_test(
                    fill_bytes = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                header_byte_count_test = telestream_cloud_qc.models.header_byte_count_test.header_byte_count_test(
                    header_bytes = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                body_partition_status_test = telestream_cloud_qc.models.partition_status_test.partition_status_test(
                    closed_complete = True, 
                    open_incomplete = True, 
                    closed_incomplete = True, 
                    open_complete = True, 
                    not_present = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                body_partition_count_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                body_partition_duration_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                body_partition_length_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                footer_partition_status_test = telestream_cloud_qc.models.partition_status_test.partition_status_test(
                    closed_complete = True, 
                    open_incomplete = True, 
                    closed_incomplete = True, 
                    open_complete = True, 
                    not_present = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                rip_present_test = telestream_cloud_qc.models.rip_present_test.rip_present_test(
                    reject_on_error = True, 
                    checked = True, ), 
                essence_location_test = telestream_cloud_qc.models.location_test.location_test(
                    header = '0', 
                    body = '0', 
                    footer = '0', 
                    header_or_body_or_footer = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                picture_essence_container_label_test = telestream_cloud_qc.models.mxf_key_test.mxf_key_test(
                    use_custom = True, 
                    predefined_key = '0', 
                    custom_key = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                picture_element_key_test = telestream_cloud_qc.models.mxf_key_test.mxf_key_test(
                    use_custom = True, 
                    predefined_key = '0', 
                    custom_key = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                picture_essence_coding_test = telestream_cloud_qc.models.picture_essence_coding_test.picture_essence_coding_test(
                    codings = telestream_cloud_qc.models.array_of_picture_essence_coding.array_of_picture_essence_coding(
                        picture_essence_coding = [
                            'AVCI-50-1080-60-I'
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                field_dominance_test = telestream_cloud_qc.models.field_dominance_test.field_dominance_test(
                    first_field = 'FdAbsent', 
                    reject_on_error = True, 
                    checked = True, ), 
                signal_standard_test = telestream_cloud_qc.models.signal_standard_test.signal_standard_test(
                    standard = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                picture_offsets_test = telestream_cloud_qc.models.picture_offsets_test.picture_offsets_test(
                    stored_ftwo = 56, 
                    display_ftwo = 56, 
                    sampled_x = 56, 
                    sampled_y = 56, 
                    display_x = 56, 
                    display_y = 56, 
                    image_start = 56, 
                    image_end = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                active_format_descriptor_test = telestream_cloud_qc.models.active_format_descriptor_test.active_format_descriptor_test(
                    allowed_formats = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                color_siting_test = telestream_cloud_qc.models.color_siting_test.color_siting_test(
                    color_siting = 'CoSiting', 
                    reject_on_error = True, 
                    checked = True, ), 
                padding_bits_test = telestream_cloud_qc.models.padding_bits_test.padding_bits_test(
                    padding_bits = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                color_range_test = telestream_cloud_qc.models.color_range_test.color_range_test(
                    color_range = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                subsampling_test = telestream_cloud_qc.models.subsampling_test.subsampling_test(
                    horizontal = 56, 
                    vertical = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                component_depth_test = telestream_cloud_qc.models.component_depth_test.component_depth_test(
                    component_depth = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                stored_frame_size_test = telestream_cloud_qc.models.pic_frame_size_test.pic_frame_size_test(
                    frame_size = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                sampled_frame_size_test = telestream_cloud_qc.models.pic_frame_size_test.pic_frame_size_test(
                    frame_size = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                display_frame_size_test = telestream_cloud_qc.models.pic_frame_size_test.pic_frame_size_test(
                    frame_size = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                aspect_ratio_test = telestream_cloud_qc.models.ratio_test.ratio_test(
                    numerator = 56, 
                    denominator = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                pic_edit_rate_test = telestream_cloud_qc.models.ratio_test.ratio_test(
                    numerator = 56, 
                    denominator = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                reference_levels_test = telestream_cloud_qc.models.reference_levels_test.reference_levels_test(
                    black_ref = 56, 
                    white_ref = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                video_line_map_test = telestream_cloud_qc.models.video_line_map_test.video_line_map_test(
                    line_maps = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                video_descriptor_test = telestream_cloud_qc.models.video_descriptor_test.video_descriptor_test(
                    descriptor_type = 'MpegDescriptor', 
                    reject_on_error = True, 
                    checked = True, ), 
                video_sub_descriptor_test = telestream_cloud_qc.models.video_sub_descriptor_test.video_sub_descriptor_test(
                    sub_descriptor_type = 'AvcSubDescriptor', 
                    reject_on_error = True, 
                    checked = True, ), 
                mpeg_bit_rate_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                mpeg_identical_gop_test = telestream_cloud_qc.models.extended_bool_value_test.extended_bool_value_test(
                    value = 'true', 
                    reject_on_error = True, 
                    checked = True, ), 
                mpeg_max_gop_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                mpeg_max_bpic_count_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                mpeg_constant_bpic_flag_test = telestream_cloud_qc.models.extended_bool_value_test.extended_bool_value_test(
                    value = 'true', 
                    reject_on_error = True, 
                    checked = True, ), 
                mpeg_coded_content_test = telestream_cloud_qc.models.long_value_test.long_value_test(
                    value = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_decoding_delay_test = telestream_cloud_qc.models.long_value_test.long_value_test(
                    value = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_coded_content_kind_test = telestream_cloud_qc.models.avc_coded_content_kind_test.avc_coded_content_kind_test(
                    kind = 'Unknown', 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_identical_gop_indicator_test = telestream_cloud_qc.models.bool_value_test.bool_value_test(
                    value = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_max_gop_size_test = telestream_cloud_qc.models.long_value_test.long_value_test(
                    value = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_max_bpic_count_test = telestream_cloud_qc.models.long_value_test.long_value_test(
                    value = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_max_bit_rate_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_avg_bit_rate_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                avc_sps_pps_test = telestream_cloud_qc.models.avc_sps_pps_test.avc_sps_pps_test(
                    profile = 56, 
                    profile_constraint = 56, 
                    sps_flag = 56, 
                    pps_flag = 56, 
                    level = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                sound_essence_container_label_test = telestream_cloud_qc.models.mxf_key_test.mxf_key_test(
                    use_custom = True, 
                    predefined_key = '0', 
                    custom_key = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                sound_element_key_test = telestream_cloud_qc.models.mxf_key_test.mxf_key_test(
                    use_custom = True, 
                    predefined_key = '0', 
                    custom_key = '0', 
                    reject_on_error = True, 
                    checked = True, ), 
                sound_essence_coding_test = telestream_cloud_qc.models.sound_essence_coding_test.sound_essence_coding_test(
                    codings = telestream_cloud_qc.models.array_of_sound_essence_coding.array_of_sound_essence_coding(
                        sound_essence_coding = [
                            'SOUND-PCM'
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_sampling_rate_test = telestream_cloud_qc.models.ratio_test.ratio_test(
                    numerator = 56, 
                    denominator = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_locked_test = telestream_cloud_qc.models.bool_value_test.bool_value_test(
                    value = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                dialnorm_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_ref_level_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                channel_count_test = telestream_cloud_qc.models.long_value_test.long_value_test(
                    value = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                quantization_bits_test = telestream_cloud_qc.models.long_value_test.long_value_test(
                    value = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_avg_bytes_per_sec_test = telestream_cloud_qc.models.long_min_max_test.long_min_max_test(
                    min = 56, 
                    max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                checked = True
            )
        else :
            return MxfTest(
        )

    def testMxfTest(self):
        """Test MxfTest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
