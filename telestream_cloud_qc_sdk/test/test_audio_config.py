# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import telestream_cloud_qc
from telestream_cloud_qc.models.audio_config import AudioConfig  # noqa: E501
from telestream_cloud_qc.rest import ApiException

class TestAudioConfig(unittest.TestCase):
    """AudioConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AudioConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = telestream_cloud_qc.models.audio_config.AudioConfig()  # noqa: E501
        if include_optional :
            return AudioConfig(
                track_select_test = telestream_cloud_qc.models.track_select_test.track_select_test(
                    selector = 56, 
                    selector_type = 'TrackIndex', 
                    checked = True, ), 
                audio_codec_test = telestream_cloud_qc.models.audio_codec_test.audio_codec_test(
                    audio_codec = 'Mpeg1Mpeg2', 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_channel_positions_test = telestream_cloud_qc.models.audio_channel_positions_test.audio_channel_positions_test(
                    chan_positions = telestream_cloud_qc.models.chan_positions.chan_positions(
                        chan_pos = [
                            'Any'
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_bit_depth_test = telestream_cloud_qc.models.audio_bit_depth_test.audio_bit_depth_test(
                    bit_depth = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_sample_rate_test = telestream_cloud_qc.models.audio_sample_rate_test.audio_sample_rate_test(
                    sample_rate = 1.337, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_bitrate_test = telestream_cloud_qc.models.audio_bitrate_test.audio_bitrate_test(
                    audio_bitrate_lower = 1.337, 
                    audio_bitrate_upper = 1.337, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_channels_test = telestream_cloud_qc.models.audio_channels_test.audio_channels_test(
                    number_of_channels = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_length_test = telestream_cloud_qc.models.audio_length_test.audio_length_test(
                    reject_on_error = True, 
                    checked = True, ), 
                audio_frequency_test = telestream_cloud_qc.models.audio_frequency_test.audio_frequency_test(
                    tone_type = 'Continuous', 
                    frequency = 1.337, 
                    time_range_enabled = True, 
                    power = 1.337, 
                    tolerance = 1.337, 
                    start_time = 1.337, 
                    time_secs_or_frames = 'Seconds', 
                    duration = 1.337, 
                    duration_secs_or_frames = 'Seconds', 
                    not_at_any_other_time = True, 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                digital_silence_whole_track_test = telestream_cloud_qc.models.digital_silence_whole_track_test.digital_silence_whole_track_test(
                    must_or_must_not_be_silent = 'Must', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, 
                    checked = True, ), 
                digital_silence_at_start_test = telestream_cloud_qc.models.digital_silence_at_start_end_test.digital_silence_at_start_end_test(
                    duration_at_start = 1.337, 
                    duration_at_end = 1.337, 
                    duration_secs_or_frames = 'Seconds', 
                    must_or_must_not_be_silent = 'Must', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, 
                    checked = True, ), 
                digital_silence_at_end_test = telestream_cloud_qc.models.digital_silence_at_start_end_test.digital_silence_at_start_end_test(
                    duration_at_start = 1.337, 
                    duration_at_end = 1.337, 
                    duration_secs_or_frames = 'Seconds', 
                    must_or_must_not_be_silent = 'Must', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, 
                    checked = True, ), 
                audio_clipping_test = telestream_cloud_qc.models.audio_clipping_test.audio_clipping_test(
                    sensitivity = 'Low', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_transient_test = telestream_cloud_qc.models.audio_transient_test.audio_transient_test(
                    sensitivity = 'Low', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_dialnorm_test = telestream_cloud_qc.models.audio_dialnorm_test.audio_dialnorm_test(
                    dialnorm_min = 56, 
                    dialnorm_max = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_layout_test = telestream_cloud_qc.models.layout_test.layout_test(
                    layout_type = 'LayoutTypeFixedIgnoreStartAndEnd', 
                    start_duration = 1.337, 
                    start_duration_secs_or_frames = 'Seconds', 
                    end_duration = 1.337, 
                    end_duration_secs_or_frames = 'Seconds', 
                    start_enabled = True, 
                    start_hours = 56, 
                    start_minutes = 56, 
                    start_seconds = 56, 
                    start_frames = 56, 
                    end_enabled = True, 
                    end_hours = 56, 
                    end_minutes = 56, 
                    end_seconds = 56, 
                    end_frames = 56, 
                    checked = True, ), 
                audio_phase_test = telestream_cloud_qc.models.audio_phase_test.audio_phase_test(
                    minimum_phase_enabled = True, 
                    minimum_phase = 1.337, 
                    mean_phase_enabled = True, 
                    mean_phase = 1.337, 
                    max_mean_phase_enabled = True, 
                    max_mean_phase = 1.337, 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_min_level_duration_test = telestream_cloud_qc.models.audio_min_level_duration_test.audio_min_level_duration_test(
                    level = 1.337, 
                    duration = 1.337, 
                    duration_secs_or_frames = 'Seconds', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_peak_level_test = telestream_cloud_qc.models.audio_peak_level_test.audio_peak_level_test(
                    min_peak_level_enabled = True, 
                    min_peak_level = 1.337, 
                    max_peak_level_enabled = True, 
                    max_peak_level = 1.337, 
                    correction_threshold = 1.337, 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, 
                    checked = True, ), 
                audio_loudness_itest = telestream_cloud_qc.models.audio_loudness_itest.audio_loudness_itest(
                    loudness_level = 1.337, 
                    loudness_tolerance = 1.337, 
                    mode = 'LoudnessModeItu', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, ), 
                audio_loudness_stest = telestream_cloud_qc.models.audio_loudness_stest.audio_loudness_stest(
                    loudness_level = 1.337, 
                    window_length = 1.337, 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, ), 
                audio_loudness_mtest = telestream_cloud_qc.models.audio_loudness_mtest.audio_loudness_mtest(
                    loudness_level = 1.337, 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, ), 
                audio_loudness_range_test = telestream_cloud_qc.models.audio_loudness_range_test.audio_loudness_range_test(
                    do_min = True, 
                    range_min = 1.337, 
                    do_max = True, 
                    range_max = 1.337, 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_ppm_level_test = telestream_cloud_qc.models.audio_ppm_level_test.audio_ppm_level_test(
                    min_ppm_level_enabled = True, 
                    min_ppm_level = 1.337, 
                    max_ppm_level_enabled = True, 
                    max_ppm_level = 1.337, 
                    mode = 'PpmModeM3', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    do_correction = True, 
                    checked = True, ), 
                nielsen_watermark_detection_test = telestream_cloud_qc.models.nielsen_watermark_detection_test.nielsen_watermark_detection_test(
                    naes2_enabled = True, 
                    naes2_sids_any_or_specific = 'SidsAny', 
                    naes2_sids = '0', 
                    naes2_high_frequency_enabled = True, 
                    naes2_high_frequency_sids_any_or_specific = 'SidsAny', 
                    naes2_high_frequency_sids = '0', 
                    naes6_enabled = True, 
                    naes6_sids_any_or_specific = 'SidsAny', 
                    naes6_sids = '0', 
                    channels = telestream_cloud_qc.models.channels.channels(
                        channel = [
                            True
                            ], ), 
                    reject_on_error = True, 
                    checked = True, )
            )
        else :
            return AudioConfig(
        )

    def testAudioConfig(self):
        """Test AudioConfig"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
