# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import telestream_cloud_qc
from telestream_cloud_qc.models.file_config import FileConfig  # noqa: E501
from telestream_cloud_qc.rest import ApiException

class TestFileConfig(unittest.TestCase):
    """FileConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test FileConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = telestream_cloud_qc.models.file_config.FileConfig()  # noqa: E501
        if include_optional :
            return FileConfig(
                container_test = telestream_cloud_qc.models.container_test.container_test(
                    container = 'None', 
                    reject_on_error = True, 
                    checked = True, ), 
                mxf_op_test = telestream_cloud_qc.models.mxf_op_test.mxf_op_test(
                    op = 'OpAtom', 
                    require_closed = True, 
                    require_complete = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                video_codec_test = telestream_cloud_qc.models.video_codec_test.video_codec_test(
                    video_codec = 'Mpeg2', 
                    video_profile = 'VideoProfileNone', 
                    video_level = 'VideoLevelNone', 
                    reject_on_error = True, 
                    checked = True, ), 
                container_essence_consistency_test = telestream_cloud_qc.models.container_essence_consistency_test.container_essence_consistency_test(
                    reject_on_error = True, 
                    checked = True, ), 
                imf_conformance_test = telestream_cloud_qc.models.imf_conformance_test.imf_conformance_test(
                    reject_on_error = True, 
                    checked = True, ), 
                netflix_photon_test = telestream_cloud_qc.models.netflix_photon_test.netflix_photon_test(
                    reject_on_error = True, 
                    checked = True, ), 
                sps_pps_test = telestream_cloud_qc.models.sps_pps_test.sps_pps_test(
                    reject_on_error = True, 
                    checked = True, ), 
                mbaff_test = telestream_cloud_qc.models.mbaff_test.mbaff_test(
                    mbaff_required = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                cabac_test = telestream_cloud_qc.models.cabac_test.cabac_test(
                    cabac_required = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                enhanced_syntax_test = telestream_cloud_qc.models.enhanced_syntax_test.enhanced_syntax_test(
                    check_container = True, 
                    check_elementary_stream = True, 
                    reject_on_error = True, 
                    checked = True, ), 
                framesize_test = telestream_cloud_qc.models.framesize_test.framesize_test(
                    horizontal_size = 56, 
                    vertical_size = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                chroma_subsampling_test = telestream_cloud_qc.models.chroma_subsampling_test.chroma_subsampling_test(
                    subsampling = 'UnknownChromaSubsampling', 
                    reject_on_error = True, 
                    checked = True, ), 
                pixel_aspect_ratio_test = telestream_cloud_qc.models.pixel_aspect_ratio_test.pixel_aspect_ratio_test(
                    pixel_aspect_ratio_numerator = 56, 
                    pixel_aspect_ratio_denominator = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                frame_aspect_ratio_test = telestream_cloud_qc.models.frame_aspect_ratio_test.frame_aspect_ratio_test(
                    frame_aspect_ratio_numerator = 56, 
                    frame_aspect_ratio_denominator = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                clean_aperture_test = telestream_cloud_qc.models.clean_aperture_test.clean_aperture_test(
                    reject_on_error = True, 
                    checked = True, ), 
                i_tunes_compatibility_test = telestream_cloud_qc.models.i_tunes_compatibility_test.i_tunes_compatibility_test(
                    reject_on_error = True, 
                    checked = True, ), 
                single_sample_description_test = telestream_cloud_qc.models.single_sample_description_test.single_sample_description_test(
                    reject_on_error = True, 
                    checked = True, ), 
                framerate_test = telestream_cloud_qc.models.framerate_test.framerate_test(
                    framerate_numerator = 56, 
                    framerate_denominator = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                video_bit_depth_test = telestream_cloud_qc.models.video_bit_depth_test.video_bit_depth_test(
                    bit_depth = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                video_bit_rate_mode_test = telestream_cloud_qc.models.bit_rate_mode_test.bit_rate_mode_test(
                    mode = 'CBR', 
                    reject_on_error = True, 
                    checked = True, ), 
                video_bitrate_test = telestream_cloud_qc.models.video_bitrate_test.video_bitrate_test(
                    video_bitrate_lower = 1.337, 
                    video_bitrate_upper = 1.337, 
                    reject_on_error = True, 
                    checked = True, ), 
                gop_length_test = telestream_cloud_qc.models.gop_length_test.gop_length_test(
                    gop_length = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                advanced_gop_length_test = telestream_cloud_qc.models.advanced_gop_length_test.advanced_gop_length_test(
                    first_gop_enabled = True, 
                    first_gop_i = '0', 
                    first_gop_p = '0', 
                    first_gop_closed = 'Either', 
                    other_gop_enabled = True, 
                    other_gop_i = '0', 
                    other_gop_p = '0', 
                    other_gop_closed = 'Either', 
                    last_gop_enabled = True, 
                    last_gop_i = '0', 
                    last_gop_p = '0', 
                    last_gop_closed = 'Either', 
                    order = 'Display', 
                    report = 'Unique', 
                    reject_on_error = True, 
                    checked = True, ), 
                buffer_size_test = telestream_cloud_qc.models.buffer_size_test.buffer_size_test(
                    min_size = 56, 
                    max_size = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                closed_caps608_test = telestream_cloud_qc.models.text_stream_test.text_stream_test(
                    require = 'Require', 
                    teletext_type = 'TeletextAny', 
                    reject_on_error = True, 
                    checked = True, ), 
                closed_caps708_test = telestream_cloud_qc.models.text_stream_test.text_stream_test(
                    require = 'Require', 
                    teletext_type = 'TeletextAny', 
                    reject_on_error = True, 
                    checked = True, ), 
                dvb_subtitles_test = telestream_cloud_qc.models.text_stream_test.text_stream_test(
                    require = 'Require', 
                    teletext_type = 'TeletextAny', 
                    reject_on_error = True, 
                    checked = True, ), 
                teletext_test = telestream_cloud_qc.models.text_stream_test.text_stream_test(
                    require = 'Require', 
                    teletext_type = 'TeletextAny', 
                    reject_on_error = True, 
                    checked = True, ), 
                captions_test = telestream_cloud_qc.models.captions_test.captions_test(
                    signal_enabled = True, 
                    signal_time = 1.337, 
                    signal_time_secs_or_frames = 'Seconds', 
                    content_enabled = True, 
                    content_time = 1.337, 
                    content_time_secs_or_frames = 'Seconds', 
                    line21_cea608_enabled = True, 
                    a53_cea608_enabled = True, 
                    a53_cea708_enabled = True, 
                    smpte436m_cea608_enabled = True, 
                    smpte436m_cea708_enabled = True, 
                    start_duration_ignore = 1.337, 
                    start_duration_secs_or_frames = 'Seconds', 
                    end_duration_ignore = 1.337, 
                    end_duration_secs_or_frames = 'Seconds', 
                    reject_on_error = True, 
                    checked = True, ), 
                active_format_test = telestream_cloud_qc.models.active_format_test.active_format_test(
                    afd = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                file_bitrate_test = telestream_cloud_qc.models.file_bitrate_test.file_bitrate_test(
                    file_bitrate_lower = 1.337, 
                    file_bitrate_upper = 1.337, 
                    reject_on_error = True, 
                    checked = True, ), 
                file_duration_test = telestream_cloud_qc.models.file_duration_test.file_duration_test(
                    file_duration_lower_hours = 56, 
                    file_duration_lower_minutes = 56, 
                    file_duration_lower_seconds = 56, 
                    file_duration_lower_frames = 56, 
                    file_duration_upper_hours = 56, 
                    file_duration_upper_minutes = 56, 
                    file_duration_upper_seconds = 56, 
                    file_duration_upper_frames = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                audio_tracks_test = telestream_cloud_qc.models.audio_tracks_test.audio_tracks_test(
                    num_tracks = 56, 
                    reject_on_error = True, 
                    checked = True, ), 
                use_start_timecode_test = telestream_cloud_qc.models.use_start_timecode_test.use_start_timecode_test(
                    source = 'Container', 
                    checked = True, ), 
                start_timecode_test = telestream_cloud_qc.models.start_timecode_test.start_timecode_test(
                    range_method = 'StartTcAt', 
                    hours = 56, 
                    minutes = 56, 
                    seconds = 56, 
                    frames = 56, 
                    frames_tolerance = 56, 
                    end_hours = 56, 
                    end_minutes = 56, 
                    end_seconds = 56, 
                    end_frames = 56, 
                    reject_on_error = True, 
                    do_correction = True, 
                    checked = True, ), 
                dont_copy_av_delay_test = telestream_cloud_qc.models.dont_copy_av_delay_test.dont_copy_av_delay_test(
                    checked = True, ), 
                container_drop_frame_test = telestream_cloud_qc.models.drop_frame_test.drop_frame_test(
                    drop_frame = 'NonDrop', 
                    reject_on_error = True, 
                    checked = True, ), 
                video_drop_frame_test = telestream_cloud_qc.models.drop_frame_test.drop_frame_test(
                    drop_frame = 'NonDrop', 
                    reject_on_error = True, 
                    checked = True, ), 
                timecode_continuity_test = telestream_cloud_qc.models.timecode_continuity_test.timecode_continuity_test(
                    disallow_wrap = True, 
                    reject_on_error = True, 
                    checked = True, )
            )
        else :
            return FileConfig(
        )

    def testFileConfig(self):
        """Test FileConfig"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
