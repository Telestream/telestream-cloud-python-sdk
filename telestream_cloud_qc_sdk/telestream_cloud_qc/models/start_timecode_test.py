# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class StartTimecodeTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'range_method': 'StartTcRangeMethod',
        'hours': 'int',
        'minutes': 'int',
        'seconds': 'int',
        'frames': 'int',
        'frames_tolerance': 'int',
        'end_hours': 'int',
        'end_minutes': 'int',
        'end_seconds': 'int',
        'end_frames': 'int',
        'reject_on_error': 'bool',
        'do_correction': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'range_method': 'range_method',
        'hours': 'hours',
        'minutes': 'minutes',
        'seconds': 'seconds',
        'frames': 'frames',
        'frames_tolerance': 'frames_tolerance',
        'end_hours': 'end_hours',
        'end_minutes': 'end_minutes',
        'end_seconds': 'end_seconds',
        'end_frames': 'end_frames',
        'reject_on_error': 'reject_on_error',
        'do_correction': 'do_correction',
        'checked': 'checked'
    }

    def __init__(self, range_method=None, hours=None, minutes=None, seconds=None, frames=None, frames_tolerance=None, end_hours=None, end_minutes=None, end_seconds=None, end_frames=None, reject_on_error=None, do_correction=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """StartTimecodeTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._range_method = None
        self._hours = None
        self._minutes = None
        self._seconds = None
        self._frames = None
        self._frames_tolerance = None
        self._end_hours = None
        self._end_minutes = None
        self._end_seconds = None
        self._end_frames = None
        self._reject_on_error = None
        self._do_correction = None
        self._checked = None
        self.discriminator = None

        if range_method is not None:
            self.range_method = range_method
        if hours is not None:
            self.hours = hours
        if minutes is not None:
            self.minutes = minutes
        if seconds is not None:
            self.seconds = seconds
        if frames is not None:
            self.frames = frames
        if frames_tolerance is not None:
            self.frames_tolerance = frames_tolerance
        if end_hours is not None:
            self.end_hours = end_hours
        if end_minutes is not None:
            self.end_minutes = end_minutes
        if end_seconds is not None:
            self.end_seconds = end_seconds
        if end_frames is not None:
            self.end_frames = end_frames
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if do_correction is not None:
            self.do_correction = do_correction
        if checked is not None:
            self.checked = checked

    @property
    def range_method(self):
        """Gets the range_method of this StartTimecodeTest.  # noqa: E501


        :return: The range_method of this StartTimecodeTest.  # noqa: E501
        :rtype: StartTcRangeMethod
        """
        return self._range_method

    @range_method.setter
    def range_method(self, range_method):
        """Sets the range_method of this StartTimecodeTest.


        :param range_method: The range_method of this StartTimecodeTest.  # noqa: E501
        :type: StartTcRangeMethod
        """

        self._range_method = range_method

    @property
    def hours(self):
        """Gets the hours of this StartTimecodeTest.  # noqa: E501


        :return: The hours of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this StartTimecodeTest.


        :param hours: The hours of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this StartTimecodeTest.  # noqa: E501


        :return: The minutes of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this StartTimecodeTest.


        :param minutes: The minutes of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def seconds(self):
        """Gets the seconds of this StartTimecodeTest.  # noqa: E501


        :return: The seconds of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this StartTimecodeTest.


        :param seconds: The seconds of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._seconds = seconds

    @property
    def frames(self):
        """Gets the frames of this StartTimecodeTest.  # noqa: E501


        :return: The frames of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this StartTimecodeTest.


        :param frames: The frames of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._frames = frames

    @property
    def frames_tolerance(self):
        """Gets the frames_tolerance of this StartTimecodeTest.  # noqa: E501


        :return: The frames_tolerance of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._frames_tolerance

    @frames_tolerance.setter
    def frames_tolerance(self, frames_tolerance):
        """Sets the frames_tolerance of this StartTimecodeTest.


        :param frames_tolerance: The frames_tolerance of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._frames_tolerance = frames_tolerance

    @property
    def end_hours(self):
        """Gets the end_hours of this StartTimecodeTest.  # noqa: E501


        :return: The end_hours of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._end_hours

    @end_hours.setter
    def end_hours(self, end_hours):
        """Sets the end_hours of this StartTimecodeTest.


        :param end_hours: The end_hours of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._end_hours = end_hours

    @property
    def end_minutes(self):
        """Gets the end_minutes of this StartTimecodeTest.  # noqa: E501


        :return: The end_minutes of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._end_minutes

    @end_minutes.setter
    def end_minutes(self, end_minutes):
        """Sets the end_minutes of this StartTimecodeTest.


        :param end_minutes: The end_minutes of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._end_minutes = end_minutes

    @property
    def end_seconds(self):
        """Gets the end_seconds of this StartTimecodeTest.  # noqa: E501


        :return: The end_seconds of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._end_seconds

    @end_seconds.setter
    def end_seconds(self, end_seconds):
        """Sets the end_seconds of this StartTimecodeTest.


        :param end_seconds: The end_seconds of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._end_seconds = end_seconds

    @property
    def end_frames(self):
        """Gets the end_frames of this StartTimecodeTest.  # noqa: E501


        :return: The end_frames of this StartTimecodeTest.  # noqa: E501
        :rtype: int
        """
        return self._end_frames

    @end_frames.setter
    def end_frames(self, end_frames):
        """Sets the end_frames of this StartTimecodeTest.


        :param end_frames: The end_frames of this StartTimecodeTest.  # noqa: E501
        :type: int
        """

        self._end_frames = end_frames

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this StartTimecodeTest.  # noqa: E501


        :return: The reject_on_error of this StartTimecodeTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this StartTimecodeTest.


        :param reject_on_error: The reject_on_error of this StartTimecodeTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def do_correction(self):
        """Gets the do_correction of this StartTimecodeTest.  # noqa: E501


        :return: The do_correction of this StartTimecodeTest.  # noqa: E501
        :rtype: bool
        """
        return self._do_correction

    @do_correction.setter
    def do_correction(self, do_correction):
        """Sets the do_correction of this StartTimecodeTest.


        :param do_correction: The do_correction of this StartTimecodeTest.  # noqa: E501
        :type: bool
        """

        self._do_correction = do_correction

    @property
    def checked(self):
        """Gets the checked of this StartTimecodeTest.  # noqa: E501


        :return: The checked of this StartTimecodeTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this StartTimecodeTest.


        :param checked: The checked of this StartTimecodeTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartTimecodeTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartTimecodeTest):
            return True

        return self.to_dict() != other.to_dict()
