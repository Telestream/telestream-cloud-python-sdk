# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class As11XprofileTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'as11_rules': 'As11Rules',
        'embedded_xml_documents': 'EmbeddedXmlDocuments',
        'extra_audio_layout_modes': 'ExtraAudioLayoutModes',
        'picture_essence_constraints': 'PictureEssenceConstraints',
        'file_format_specification_identification_label': 'FileFormatSpecificationIdentificationLabel',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'as11_rules': 'as11_rules',
        'embedded_xml_documents': 'embedded_xml_documents',
        'extra_audio_layout_modes': 'extra_audio_layout_modes',
        'picture_essence_constraints': 'picture_essence_constraints',
        'file_format_specification_identification_label': 'file_format_specification_identification_label',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, as11_rules=None, embedded_xml_documents=None, extra_audio_layout_modes=None, picture_essence_constraints=None, file_format_specification_identification_label=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """As11XprofileTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._as11_rules = None
        self._embedded_xml_documents = None
        self._extra_audio_layout_modes = None
        self._picture_essence_constraints = None
        self._file_format_specification_identification_label = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if as11_rules is not None:
            self.as11_rules = as11_rules
        if embedded_xml_documents is not None:
            self.embedded_xml_documents = embedded_xml_documents
        if extra_audio_layout_modes is not None:
            self.extra_audio_layout_modes = extra_audio_layout_modes
        if picture_essence_constraints is not None:
            self.picture_essence_constraints = picture_essence_constraints
        if file_format_specification_identification_label is not None:
            self.file_format_specification_identification_label = file_format_specification_identification_label
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def as11_rules(self):
        """Gets the as11_rules of this As11XprofileTest.  # noqa: E501


        :return: The as11_rules of this As11XprofileTest.  # noqa: E501
        :rtype: As11Rules
        """
        return self._as11_rules

    @as11_rules.setter
    def as11_rules(self, as11_rules):
        """Sets the as11_rules of this As11XprofileTest.


        :param as11_rules: The as11_rules of this As11XprofileTest.  # noqa: E501
        :type: As11Rules
        """

        self._as11_rules = as11_rules

    @property
    def embedded_xml_documents(self):
        """Gets the embedded_xml_documents of this As11XprofileTest.  # noqa: E501


        :return: The embedded_xml_documents of this As11XprofileTest.  # noqa: E501
        :rtype: EmbeddedXmlDocuments
        """
        return self._embedded_xml_documents

    @embedded_xml_documents.setter
    def embedded_xml_documents(self, embedded_xml_documents):
        """Sets the embedded_xml_documents of this As11XprofileTest.


        :param embedded_xml_documents: The embedded_xml_documents of this As11XprofileTest.  # noqa: E501
        :type: EmbeddedXmlDocuments
        """

        self._embedded_xml_documents = embedded_xml_documents

    @property
    def extra_audio_layout_modes(self):
        """Gets the extra_audio_layout_modes of this As11XprofileTest.  # noqa: E501


        :return: The extra_audio_layout_modes of this As11XprofileTest.  # noqa: E501
        :rtype: ExtraAudioLayoutModes
        """
        return self._extra_audio_layout_modes

    @extra_audio_layout_modes.setter
    def extra_audio_layout_modes(self, extra_audio_layout_modes):
        """Sets the extra_audio_layout_modes of this As11XprofileTest.


        :param extra_audio_layout_modes: The extra_audio_layout_modes of this As11XprofileTest.  # noqa: E501
        :type: ExtraAudioLayoutModes
        """

        self._extra_audio_layout_modes = extra_audio_layout_modes

    @property
    def picture_essence_constraints(self):
        """Gets the picture_essence_constraints of this As11XprofileTest.  # noqa: E501


        :return: The picture_essence_constraints of this As11XprofileTest.  # noqa: E501
        :rtype: PictureEssenceConstraints
        """
        return self._picture_essence_constraints

    @picture_essence_constraints.setter
    def picture_essence_constraints(self, picture_essence_constraints):
        """Sets the picture_essence_constraints of this As11XprofileTest.


        :param picture_essence_constraints: The picture_essence_constraints of this As11XprofileTest.  # noqa: E501
        :type: PictureEssenceConstraints
        """

        self._picture_essence_constraints = picture_essence_constraints

    @property
    def file_format_specification_identification_label(self):
        """Gets the file_format_specification_identification_label of this As11XprofileTest.  # noqa: E501


        :return: The file_format_specification_identification_label of this As11XprofileTest.  # noqa: E501
        :rtype: FileFormatSpecificationIdentificationLabel
        """
        return self._file_format_specification_identification_label

    @file_format_specification_identification_label.setter
    def file_format_specification_identification_label(self, file_format_specification_identification_label):
        """Sets the file_format_specification_identification_label of this As11XprofileTest.


        :param file_format_specification_identification_label: The file_format_specification_identification_label of this As11XprofileTest.  # noqa: E501
        :type: FileFormatSpecificationIdentificationLabel
        """

        self._file_format_specification_identification_label = file_format_specification_identification_label

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this As11XprofileTest.  # noqa: E501


        :return: The reject_on_error of this As11XprofileTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this As11XprofileTest.


        :param reject_on_error: The reject_on_error of this As11XprofileTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this As11XprofileTest.  # noqa: E501


        :return: The checked of this As11XprofileTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this As11XprofileTest.


        :param checked: The checked of this As11XprofileTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, As11XprofileTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, As11XprofileTest):
            return True

        return self.to_dict() != other.to_dict()
