# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class AudioConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'track_select_test': 'TrackSelectTest',
        'audio_codec_test': 'AudioCodecTest',
        'audio_channel_positions_test': 'AudioChannelPositionsTest',
        'audio_bit_depth_test': 'AudioBitDepthTest',
        'audio_sample_rate_test': 'AudioSampleRateTest',
        'audio_bitrate_test': 'AudioBitrateTest',
        'audio_channels_test': 'AudioChannelsTest',
        'audio_length_test': 'AudioLengthTest',
        'audio_frequency_test': 'AudioFrequencyTest',
        'digital_silence_whole_track_test': 'DigitalSilenceWholeTrackTest',
        'digital_silence_at_start_test': 'DigitalSilenceAtStartEndTest',
        'digital_silence_at_end_test': 'DigitalSilenceAtStartEndTest',
        'audio_clipping_test': 'AudioClippingTest',
        'audio_transient_test': 'AudioTransientTest',
        'audio_dialnorm_test': 'AudioDialnormTest',
        'audio_layout_test': 'LayoutTest',
        'audio_phase_test': 'AudioPhaseTest',
        'audio_min_level_duration_test': 'AudioMinLevelDurationTest',
        'audio_peak_level_test': 'AudioPeakLevelTest',
        'audio_loudness_itest': 'AudioLoudnessItest',
        'audio_loudness_stest': 'AudioLoudnessStest',
        'audio_loudness_mtest': 'AudioLoudnessMtest',
        'audio_loudness_range_test': 'AudioLoudnessRangeTest',
        'audio_ppm_level_test': 'AudioPpmLevelTest',
        'nielsen_watermark_detection_test': 'NielsenWatermarkDetectionTest'
    }

    attribute_map = {
        'track_select_test': 'track_select_test',
        'audio_codec_test': 'audio_codec_test',
        'audio_channel_positions_test': 'audio_channel_positions_test',
        'audio_bit_depth_test': 'audio_bit_depth_test',
        'audio_sample_rate_test': 'audio_sample_rate_test',
        'audio_bitrate_test': 'audio_bitrate_test',
        'audio_channels_test': 'audio_channels_test',
        'audio_length_test': 'audio_length_test',
        'audio_frequency_test': 'audio_frequency_test',
        'digital_silence_whole_track_test': 'digital_silence_whole_track_test',
        'digital_silence_at_start_test': 'digital_silence_at_start_test',
        'digital_silence_at_end_test': 'digital_silence_at_end_test',
        'audio_clipping_test': 'audio_clipping_test',
        'audio_transient_test': 'audio_transient_test',
        'audio_dialnorm_test': 'audio_dialnorm_test',
        'audio_layout_test': 'audio_layout_test',
        'audio_phase_test': 'audio_phase_test',
        'audio_min_level_duration_test': 'audio_min_level_duration_test',
        'audio_peak_level_test': 'audio_peak_level_test',
        'audio_loudness_itest': 'audio_loudness_itest',
        'audio_loudness_stest': 'audio_loudness_stest',
        'audio_loudness_mtest': 'audio_loudness_mtest',
        'audio_loudness_range_test': 'audio_loudness_range_test',
        'audio_ppm_level_test': 'audio_ppm_level_test',
        'nielsen_watermark_detection_test': 'nielsen_watermark_detection_test'
    }

    def __init__(self, track_select_test=None, audio_codec_test=None, audio_channel_positions_test=None, audio_bit_depth_test=None, audio_sample_rate_test=None, audio_bitrate_test=None, audio_channels_test=None, audio_length_test=None, audio_frequency_test=None, digital_silence_whole_track_test=None, digital_silence_at_start_test=None, digital_silence_at_end_test=None, audio_clipping_test=None, audio_transient_test=None, audio_dialnorm_test=None, audio_layout_test=None, audio_phase_test=None, audio_min_level_duration_test=None, audio_peak_level_test=None, audio_loudness_itest=None, audio_loudness_stest=None, audio_loudness_mtest=None, audio_loudness_range_test=None, audio_ppm_level_test=None, nielsen_watermark_detection_test=None, local_vars_configuration=None):  # noqa: E501
        """AudioConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._track_select_test = None
        self._audio_codec_test = None
        self._audio_channel_positions_test = None
        self._audio_bit_depth_test = None
        self._audio_sample_rate_test = None
        self._audio_bitrate_test = None
        self._audio_channels_test = None
        self._audio_length_test = None
        self._audio_frequency_test = None
        self._digital_silence_whole_track_test = None
        self._digital_silence_at_start_test = None
        self._digital_silence_at_end_test = None
        self._audio_clipping_test = None
        self._audio_transient_test = None
        self._audio_dialnorm_test = None
        self._audio_layout_test = None
        self._audio_phase_test = None
        self._audio_min_level_duration_test = None
        self._audio_peak_level_test = None
        self._audio_loudness_itest = None
        self._audio_loudness_stest = None
        self._audio_loudness_mtest = None
        self._audio_loudness_range_test = None
        self._audio_ppm_level_test = None
        self._nielsen_watermark_detection_test = None
        self.discriminator = None

        if track_select_test is not None:
            self.track_select_test = track_select_test
        if audio_codec_test is not None:
            self.audio_codec_test = audio_codec_test
        if audio_channel_positions_test is not None:
            self.audio_channel_positions_test = audio_channel_positions_test
        if audio_bit_depth_test is not None:
            self.audio_bit_depth_test = audio_bit_depth_test
        if audio_sample_rate_test is not None:
            self.audio_sample_rate_test = audio_sample_rate_test
        if audio_bitrate_test is not None:
            self.audio_bitrate_test = audio_bitrate_test
        if audio_channels_test is not None:
            self.audio_channels_test = audio_channels_test
        if audio_length_test is not None:
            self.audio_length_test = audio_length_test
        if audio_frequency_test is not None:
            self.audio_frequency_test = audio_frequency_test
        if digital_silence_whole_track_test is not None:
            self.digital_silence_whole_track_test = digital_silence_whole_track_test
        if digital_silence_at_start_test is not None:
            self.digital_silence_at_start_test = digital_silence_at_start_test
        if digital_silence_at_end_test is not None:
            self.digital_silence_at_end_test = digital_silence_at_end_test
        if audio_clipping_test is not None:
            self.audio_clipping_test = audio_clipping_test
        if audio_transient_test is not None:
            self.audio_transient_test = audio_transient_test
        if audio_dialnorm_test is not None:
            self.audio_dialnorm_test = audio_dialnorm_test
        if audio_layout_test is not None:
            self.audio_layout_test = audio_layout_test
        if audio_phase_test is not None:
            self.audio_phase_test = audio_phase_test
        if audio_min_level_duration_test is not None:
            self.audio_min_level_duration_test = audio_min_level_duration_test
        if audio_peak_level_test is not None:
            self.audio_peak_level_test = audio_peak_level_test
        if audio_loudness_itest is not None:
            self.audio_loudness_itest = audio_loudness_itest
        if audio_loudness_stest is not None:
            self.audio_loudness_stest = audio_loudness_stest
        if audio_loudness_mtest is not None:
            self.audio_loudness_mtest = audio_loudness_mtest
        if audio_loudness_range_test is not None:
            self.audio_loudness_range_test = audio_loudness_range_test
        if audio_ppm_level_test is not None:
            self.audio_ppm_level_test = audio_ppm_level_test
        if nielsen_watermark_detection_test is not None:
            self.nielsen_watermark_detection_test = nielsen_watermark_detection_test

    @property
    def track_select_test(self):
        """Gets the track_select_test of this AudioConfig.  # noqa: E501


        :return: The track_select_test of this AudioConfig.  # noqa: E501
        :rtype: TrackSelectTest
        """
        return self._track_select_test

    @track_select_test.setter
    def track_select_test(self, track_select_test):
        """Sets the track_select_test of this AudioConfig.


        :param track_select_test: The track_select_test of this AudioConfig.  # noqa: E501
        :type: TrackSelectTest
        """

        self._track_select_test = track_select_test

    @property
    def audio_codec_test(self):
        """Gets the audio_codec_test of this AudioConfig.  # noqa: E501


        :return: The audio_codec_test of this AudioConfig.  # noqa: E501
        :rtype: AudioCodecTest
        """
        return self._audio_codec_test

    @audio_codec_test.setter
    def audio_codec_test(self, audio_codec_test):
        """Sets the audio_codec_test of this AudioConfig.


        :param audio_codec_test: The audio_codec_test of this AudioConfig.  # noqa: E501
        :type: AudioCodecTest
        """

        self._audio_codec_test = audio_codec_test

    @property
    def audio_channel_positions_test(self):
        """Gets the audio_channel_positions_test of this AudioConfig.  # noqa: E501


        :return: The audio_channel_positions_test of this AudioConfig.  # noqa: E501
        :rtype: AudioChannelPositionsTest
        """
        return self._audio_channel_positions_test

    @audio_channel_positions_test.setter
    def audio_channel_positions_test(self, audio_channel_positions_test):
        """Sets the audio_channel_positions_test of this AudioConfig.


        :param audio_channel_positions_test: The audio_channel_positions_test of this AudioConfig.  # noqa: E501
        :type: AudioChannelPositionsTest
        """

        self._audio_channel_positions_test = audio_channel_positions_test

    @property
    def audio_bit_depth_test(self):
        """Gets the audio_bit_depth_test of this AudioConfig.  # noqa: E501


        :return: The audio_bit_depth_test of this AudioConfig.  # noqa: E501
        :rtype: AudioBitDepthTest
        """
        return self._audio_bit_depth_test

    @audio_bit_depth_test.setter
    def audio_bit_depth_test(self, audio_bit_depth_test):
        """Sets the audio_bit_depth_test of this AudioConfig.


        :param audio_bit_depth_test: The audio_bit_depth_test of this AudioConfig.  # noqa: E501
        :type: AudioBitDepthTest
        """

        self._audio_bit_depth_test = audio_bit_depth_test

    @property
    def audio_sample_rate_test(self):
        """Gets the audio_sample_rate_test of this AudioConfig.  # noqa: E501


        :return: The audio_sample_rate_test of this AudioConfig.  # noqa: E501
        :rtype: AudioSampleRateTest
        """
        return self._audio_sample_rate_test

    @audio_sample_rate_test.setter
    def audio_sample_rate_test(self, audio_sample_rate_test):
        """Sets the audio_sample_rate_test of this AudioConfig.


        :param audio_sample_rate_test: The audio_sample_rate_test of this AudioConfig.  # noqa: E501
        :type: AudioSampleRateTest
        """

        self._audio_sample_rate_test = audio_sample_rate_test

    @property
    def audio_bitrate_test(self):
        """Gets the audio_bitrate_test of this AudioConfig.  # noqa: E501


        :return: The audio_bitrate_test of this AudioConfig.  # noqa: E501
        :rtype: AudioBitrateTest
        """
        return self._audio_bitrate_test

    @audio_bitrate_test.setter
    def audio_bitrate_test(self, audio_bitrate_test):
        """Sets the audio_bitrate_test of this AudioConfig.


        :param audio_bitrate_test: The audio_bitrate_test of this AudioConfig.  # noqa: E501
        :type: AudioBitrateTest
        """

        self._audio_bitrate_test = audio_bitrate_test

    @property
    def audio_channels_test(self):
        """Gets the audio_channels_test of this AudioConfig.  # noqa: E501


        :return: The audio_channels_test of this AudioConfig.  # noqa: E501
        :rtype: AudioChannelsTest
        """
        return self._audio_channels_test

    @audio_channels_test.setter
    def audio_channels_test(self, audio_channels_test):
        """Sets the audio_channels_test of this AudioConfig.


        :param audio_channels_test: The audio_channels_test of this AudioConfig.  # noqa: E501
        :type: AudioChannelsTest
        """

        self._audio_channels_test = audio_channels_test

    @property
    def audio_length_test(self):
        """Gets the audio_length_test of this AudioConfig.  # noqa: E501


        :return: The audio_length_test of this AudioConfig.  # noqa: E501
        :rtype: AudioLengthTest
        """
        return self._audio_length_test

    @audio_length_test.setter
    def audio_length_test(self, audio_length_test):
        """Sets the audio_length_test of this AudioConfig.


        :param audio_length_test: The audio_length_test of this AudioConfig.  # noqa: E501
        :type: AudioLengthTest
        """

        self._audio_length_test = audio_length_test

    @property
    def audio_frequency_test(self):
        """Gets the audio_frequency_test of this AudioConfig.  # noqa: E501


        :return: The audio_frequency_test of this AudioConfig.  # noqa: E501
        :rtype: AudioFrequencyTest
        """
        return self._audio_frequency_test

    @audio_frequency_test.setter
    def audio_frequency_test(self, audio_frequency_test):
        """Sets the audio_frequency_test of this AudioConfig.


        :param audio_frequency_test: The audio_frequency_test of this AudioConfig.  # noqa: E501
        :type: AudioFrequencyTest
        """

        self._audio_frequency_test = audio_frequency_test

    @property
    def digital_silence_whole_track_test(self):
        """Gets the digital_silence_whole_track_test of this AudioConfig.  # noqa: E501


        :return: The digital_silence_whole_track_test of this AudioConfig.  # noqa: E501
        :rtype: DigitalSilenceWholeTrackTest
        """
        return self._digital_silence_whole_track_test

    @digital_silence_whole_track_test.setter
    def digital_silence_whole_track_test(self, digital_silence_whole_track_test):
        """Sets the digital_silence_whole_track_test of this AudioConfig.


        :param digital_silence_whole_track_test: The digital_silence_whole_track_test of this AudioConfig.  # noqa: E501
        :type: DigitalSilenceWholeTrackTest
        """

        self._digital_silence_whole_track_test = digital_silence_whole_track_test

    @property
    def digital_silence_at_start_test(self):
        """Gets the digital_silence_at_start_test of this AudioConfig.  # noqa: E501


        :return: The digital_silence_at_start_test of this AudioConfig.  # noqa: E501
        :rtype: DigitalSilenceAtStartEndTest
        """
        return self._digital_silence_at_start_test

    @digital_silence_at_start_test.setter
    def digital_silence_at_start_test(self, digital_silence_at_start_test):
        """Sets the digital_silence_at_start_test of this AudioConfig.


        :param digital_silence_at_start_test: The digital_silence_at_start_test of this AudioConfig.  # noqa: E501
        :type: DigitalSilenceAtStartEndTest
        """

        self._digital_silence_at_start_test = digital_silence_at_start_test

    @property
    def digital_silence_at_end_test(self):
        """Gets the digital_silence_at_end_test of this AudioConfig.  # noqa: E501


        :return: The digital_silence_at_end_test of this AudioConfig.  # noqa: E501
        :rtype: DigitalSilenceAtStartEndTest
        """
        return self._digital_silence_at_end_test

    @digital_silence_at_end_test.setter
    def digital_silence_at_end_test(self, digital_silence_at_end_test):
        """Sets the digital_silence_at_end_test of this AudioConfig.


        :param digital_silence_at_end_test: The digital_silence_at_end_test of this AudioConfig.  # noqa: E501
        :type: DigitalSilenceAtStartEndTest
        """

        self._digital_silence_at_end_test = digital_silence_at_end_test

    @property
    def audio_clipping_test(self):
        """Gets the audio_clipping_test of this AudioConfig.  # noqa: E501


        :return: The audio_clipping_test of this AudioConfig.  # noqa: E501
        :rtype: AudioClippingTest
        """
        return self._audio_clipping_test

    @audio_clipping_test.setter
    def audio_clipping_test(self, audio_clipping_test):
        """Sets the audio_clipping_test of this AudioConfig.


        :param audio_clipping_test: The audio_clipping_test of this AudioConfig.  # noqa: E501
        :type: AudioClippingTest
        """

        self._audio_clipping_test = audio_clipping_test

    @property
    def audio_transient_test(self):
        """Gets the audio_transient_test of this AudioConfig.  # noqa: E501


        :return: The audio_transient_test of this AudioConfig.  # noqa: E501
        :rtype: AudioTransientTest
        """
        return self._audio_transient_test

    @audio_transient_test.setter
    def audio_transient_test(self, audio_transient_test):
        """Sets the audio_transient_test of this AudioConfig.


        :param audio_transient_test: The audio_transient_test of this AudioConfig.  # noqa: E501
        :type: AudioTransientTest
        """

        self._audio_transient_test = audio_transient_test

    @property
    def audio_dialnorm_test(self):
        """Gets the audio_dialnorm_test of this AudioConfig.  # noqa: E501


        :return: The audio_dialnorm_test of this AudioConfig.  # noqa: E501
        :rtype: AudioDialnormTest
        """
        return self._audio_dialnorm_test

    @audio_dialnorm_test.setter
    def audio_dialnorm_test(self, audio_dialnorm_test):
        """Sets the audio_dialnorm_test of this AudioConfig.


        :param audio_dialnorm_test: The audio_dialnorm_test of this AudioConfig.  # noqa: E501
        :type: AudioDialnormTest
        """

        self._audio_dialnorm_test = audio_dialnorm_test

    @property
    def audio_layout_test(self):
        """Gets the audio_layout_test of this AudioConfig.  # noqa: E501


        :return: The audio_layout_test of this AudioConfig.  # noqa: E501
        :rtype: LayoutTest
        """
        return self._audio_layout_test

    @audio_layout_test.setter
    def audio_layout_test(self, audio_layout_test):
        """Sets the audio_layout_test of this AudioConfig.


        :param audio_layout_test: The audio_layout_test of this AudioConfig.  # noqa: E501
        :type: LayoutTest
        """

        self._audio_layout_test = audio_layout_test

    @property
    def audio_phase_test(self):
        """Gets the audio_phase_test of this AudioConfig.  # noqa: E501


        :return: The audio_phase_test of this AudioConfig.  # noqa: E501
        :rtype: AudioPhaseTest
        """
        return self._audio_phase_test

    @audio_phase_test.setter
    def audio_phase_test(self, audio_phase_test):
        """Sets the audio_phase_test of this AudioConfig.


        :param audio_phase_test: The audio_phase_test of this AudioConfig.  # noqa: E501
        :type: AudioPhaseTest
        """

        self._audio_phase_test = audio_phase_test

    @property
    def audio_min_level_duration_test(self):
        """Gets the audio_min_level_duration_test of this AudioConfig.  # noqa: E501


        :return: The audio_min_level_duration_test of this AudioConfig.  # noqa: E501
        :rtype: AudioMinLevelDurationTest
        """
        return self._audio_min_level_duration_test

    @audio_min_level_duration_test.setter
    def audio_min_level_duration_test(self, audio_min_level_duration_test):
        """Sets the audio_min_level_duration_test of this AudioConfig.


        :param audio_min_level_duration_test: The audio_min_level_duration_test of this AudioConfig.  # noqa: E501
        :type: AudioMinLevelDurationTest
        """

        self._audio_min_level_duration_test = audio_min_level_duration_test

    @property
    def audio_peak_level_test(self):
        """Gets the audio_peak_level_test of this AudioConfig.  # noqa: E501


        :return: The audio_peak_level_test of this AudioConfig.  # noqa: E501
        :rtype: AudioPeakLevelTest
        """
        return self._audio_peak_level_test

    @audio_peak_level_test.setter
    def audio_peak_level_test(self, audio_peak_level_test):
        """Sets the audio_peak_level_test of this AudioConfig.


        :param audio_peak_level_test: The audio_peak_level_test of this AudioConfig.  # noqa: E501
        :type: AudioPeakLevelTest
        """

        self._audio_peak_level_test = audio_peak_level_test

    @property
    def audio_loudness_itest(self):
        """Gets the audio_loudness_itest of this AudioConfig.  # noqa: E501


        :return: The audio_loudness_itest of this AudioConfig.  # noqa: E501
        :rtype: AudioLoudnessItest
        """
        return self._audio_loudness_itest

    @audio_loudness_itest.setter
    def audio_loudness_itest(self, audio_loudness_itest):
        """Sets the audio_loudness_itest of this AudioConfig.


        :param audio_loudness_itest: The audio_loudness_itest of this AudioConfig.  # noqa: E501
        :type: AudioLoudnessItest
        """

        self._audio_loudness_itest = audio_loudness_itest

    @property
    def audio_loudness_stest(self):
        """Gets the audio_loudness_stest of this AudioConfig.  # noqa: E501


        :return: The audio_loudness_stest of this AudioConfig.  # noqa: E501
        :rtype: AudioLoudnessStest
        """
        return self._audio_loudness_stest

    @audio_loudness_stest.setter
    def audio_loudness_stest(self, audio_loudness_stest):
        """Sets the audio_loudness_stest of this AudioConfig.


        :param audio_loudness_stest: The audio_loudness_stest of this AudioConfig.  # noqa: E501
        :type: AudioLoudnessStest
        """

        self._audio_loudness_stest = audio_loudness_stest

    @property
    def audio_loudness_mtest(self):
        """Gets the audio_loudness_mtest of this AudioConfig.  # noqa: E501


        :return: The audio_loudness_mtest of this AudioConfig.  # noqa: E501
        :rtype: AudioLoudnessMtest
        """
        return self._audio_loudness_mtest

    @audio_loudness_mtest.setter
    def audio_loudness_mtest(self, audio_loudness_mtest):
        """Sets the audio_loudness_mtest of this AudioConfig.


        :param audio_loudness_mtest: The audio_loudness_mtest of this AudioConfig.  # noqa: E501
        :type: AudioLoudnessMtest
        """

        self._audio_loudness_mtest = audio_loudness_mtest

    @property
    def audio_loudness_range_test(self):
        """Gets the audio_loudness_range_test of this AudioConfig.  # noqa: E501


        :return: The audio_loudness_range_test of this AudioConfig.  # noqa: E501
        :rtype: AudioLoudnessRangeTest
        """
        return self._audio_loudness_range_test

    @audio_loudness_range_test.setter
    def audio_loudness_range_test(self, audio_loudness_range_test):
        """Sets the audio_loudness_range_test of this AudioConfig.


        :param audio_loudness_range_test: The audio_loudness_range_test of this AudioConfig.  # noqa: E501
        :type: AudioLoudnessRangeTest
        """

        self._audio_loudness_range_test = audio_loudness_range_test

    @property
    def audio_ppm_level_test(self):
        """Gets the audio_ppm_level_test of this AudioConfig.  # noqa: E501


        :return: The audio_ppm_level_test of this AudioConfig.  # noqa: E501
        :rtype: AudioPpmLevelTest
        """
        return self._audio_ppm_level_test

    @audio_ppm_level_test.setter
    def audio_ppm_level_test(self, audio_ppm_level_test):
        """Sets the audio_ppm_level_test of this AudioConfig.


        :param audio_ppm_level_test: The audio_ppm_level_test of this AudioConfig.  # noqa: E501
        :type: AudioPpmLevelTest
        """

        self._audio_ppm_level_test = audio_ppm_level_test

    @property
    def nielsen_watermark_detection_test(self):
        """Gets the nielsen_watermark_detection_test of this AudioConfig.  # noqa: E501


        :return: The nielsen_watermark_detection_test of this AudioConfig.  # noqa: E501
        :rtype: NielsenWatermarkDetectionTest
        """
        return self._nielsen_watermark_detection_test

    @nielsen_watermark_detection_test.setter
    def nielsen_watermark_detection_test(self, nielsen_watermark_detection_test):
        """Sets the nielsen_watermark_detection_test of this AudioConfig.


        :param nielsen_watermark_detection_test: The nielsen_watermark_detection_test of this AudioConfig.  # noqa: E501
        :type: NielsenWatermarkDetectionTest
        """

        self._nielsen_watermark_detection_test = nielsen_watermark_detection_test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudioConfig):
            return True

        return self.to_dict() != other.to_dict()
