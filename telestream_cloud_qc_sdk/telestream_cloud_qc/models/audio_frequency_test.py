# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class AudioFrequencyTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tone_type': 'ToneType',
        'frequency': 'float',
        'time_range_enabled': 'bool',
        'power': 'float',
        'tolerance': 'float',
        'start_time': 'float',
        'time_secs_or_frames': 'SecsOrFramesType',
        'duration': 'float',
        'duration_secs_or_frames': 'SecsOrFramesType',
        'not_at_any_other_time': 'bool',
        'channels': 'Channels',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'tone_type': 'tone_type',
        'frequency': 'frequency',
        'time_range_enabled': 'time_range_enabled',
        'power': 'power',
        'tolerance': 'tolerance',
        'start_time': 'start_time',
        'time_secs_or_frames': 'time_secs_or_frames',
        'duration': 'duration',
        'duration_secs_or_frames': 'duration_secs_or_frames',
        'not_at_any_other_time': 'not_at_any_other_time',
        'channels': 'channels',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, tone_type=None, frequency=None, time_range_enabled=None, power=None, tolerance=None, start_time=None, time_secs_or_frames=None, duration=None, duration_secs_or_frames=None, not_at_any_other_time=None, channels=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """AudioFrequencyTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tone_type = None
        self._frequency = None
        self._time_range_enabled = None
        self._power = None
        self._tolerance = None
        self._start_time = None
        self._time_secs_or_frames = None
        self._duration = None
        self._duration_secs_or_frames = None
        self._not_at_any_other_time = None
        self._channels = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if tone_type is not None:
            self.tone_type = tone_type
        if frequency is not None:
            self.frequency = frequency
        if time_range_enabled is not None:
            self.time_range_enabled = time_range_enabled
        if power is not None:
            self.power = power
        if tolerance is not None:
            self.tolerance = tolerance
        if start_time is not None:
            self.start_time = start_time
        if time_secs_or_frames is not None:
            self.time_secs_or_frames = time_secs_or_frames
        if duration is not None:
            self.duration = duration
        if duration_secs_or_frames is not None:
            self.duration_secs_or_frames = duration_secs_or_frames
        if not_at_any_other_time is not None:
            self.not_at_any_other_time = not_at_any_other_time
        if channels is not None:
            self.channels = channels
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def tone_type(self):
        """Gets the tone_type of this AudioFrequencyTest.  # noqa: E501


        :return: The tone_type of this AudioFrequencyTest.  # noqa: E501
        :rtype: ToneType
        """
        return self._tone_type

    @tone_type.setter
    def tone_type(self, tone_type):
        """Sets the tone_type of this AudioFrequencyTest.


        :param tone_type: The tone_type of this AudioFrequencyTest.  # noqa: E501
        :type: ToneType
        """

        self._tone_type = tone_type

    @property
    def frequency(self):
        """Gets the frequency of this AudioFrequencyTest.  # noqa: E501


        :return: The frequency of this AudioFrequencyTest.  # noqa: E501
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this AudioFrequencyTest.


        :param frequency: The frequency of this AudioFrequencyTest.  # noqa: E501
        :type: float
        """

        self._frequency = frequency

    @property
    def time_range_enabled(self):
        """Gets the time_range_enabled of this AudioFrequencyTest.  # noqa: E501


        :return: The time_range_enabled of this AudioFrequencyTest.  # noqa: E501
        :rtype: bool
        """
        return self._time_range_enabled

    @time_range_enabled.setter
    def time_range_enabled(self, time_range_enabled):
        """Sets the time_range_enabled of this AudioFrequencyTest.


        :param time_range_enabled: The time_range_enabled of this AudioFrequencyTest.  # noqa: E501
        :type: bool
        """

        self._time_range_enabled = time_range_enabled

    @property
    def power(self):
        """Gets the power of this AudioFrequencyTest.  # noqa: E501


        :return: The power of this AudioFrequencyTest.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this AudioFrequencyTest.


        :param power: The power of this AudioFrequencyTest.  # noqa: E501
        :type: float
        """

        self._power = power

    @property
    def tolerance(self):
        """Gets the tolerance of this AudioFrequencyTest.  # noqa: E501


        :return: The tolerance of this AudioFrequencyTest.  # noqa: E501
        :rtype: float
        """
        return self._tolerance

    @tolerance.setter
    def tolerance(self, tolerance):
        """Sets the tolerance of this AudioFrequencyTest.


        :param tolerance: The tolerance of this AudioFrequencyTest.  # noqa: E501
        :type: float
        """

        self._tolerance = tolerance

    @property
    def start_time(self):
        """Gets the start_time of this AudioFrequencyTest.  # noqa: E501


        :return: The start_time of this AudioFrequencyTest.  # noqa: E501
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AudioFrequencyTest.


        :param start_time: The start_time of this AudioFrequencyTest.  # noqa: E501
        :type: float
        """

        self._start_time = start_time

    @property
    def time_secs_or_frames(self):
        """Gets the time_secs_or_frames of this AudioFrequencyTest.  # noqa: E501


        :return: The time_secs_or_frames of this AudioFrequencyTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._time_secs_or_frames

    @time_secs_or_frames.setter
    def time_secs_or_frames(self, time_secs_or_frames):
        """Sets the time_secs_or_frames of this AudioFrequencyTest.


        :param time_secs_or_frames: The time_secs_or_frames of this AudioFrequencyTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._time_secs_or_frames = time_secs_or_frames

    @property
    def duration(self):
        """Gets the duration of this AudioFrequencyTest.  # noqa: E501


        :return: The duration of this AudioFrequencyTest.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AudioFrequencyTest.


        :param duration: The duration of this AudioFrequencyTest.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def duration_secs_or_frames(self):
        """Gets the duration_secs_or_frames of this AudioFrequencyTest.  # noqa: E501


        :return: The duration_secs_or_frames of this AudioFrequencyTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._duration_secs_or_frames

    @duration_secs_or_frames.setter
    def duration_secs_or_frames(self, duration_secs_or_frames):
        """Sets the duration_secs_or_frames of this AudioFrequencyTest.


        :param duration_secs_or_frames: The duration_secs_or_frames of this AudioFrequencyTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._duration_secs_or_frames = duration_secs_or_frames

    @property
    def not_at_any_other_time(self):
        """Gets the not_at_any_other_time of this AudioFrequencyTest.  # noqa: E501


        :return: The not_at_any_other_time of this AudioFrequencyTest.  # noqa: E501
        :rtype: bool
        """
        return self._not_at_any_other_time

    @not_at_any_other_time.setter
    def not_at_any_other_time(self, not_at_any_other_time):
        """Sets the not_at_any_other_time of this AudioFrequencyTest.


        :param not_at_any_other_time: The not_at_any_other_time of this AudioFrequencyTest.  # noqa: E501
        :type: bool
        """

        self._not_at_any_other_time = not_at_any_other_time

    @property
    def channels(self):
        """Gets the channels of this AudioFrequencyTest.  # noqa: E501


        :return: The channels of this AudioFrequencyTest.  # noqa: E501
        :rtype: Channels
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this AudioFrequencyTest.


        :param channels: The channels of this AudioFrequencyTest.  # noqa: E501
        :type: Channels
        """

        self._channels = channels

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this AudioFrequencyTest.  # noqa: E501


        :return: The reject_on_error of this AudioFrequencyTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this AudioFrequencyTest.


        :param reject_on_error: The reject_on_error of this AudioFrequencyTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this AudioFrequencyTest.  # noqa: E501


        :return: The checked of this AudioFrequencyTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this AudioFrequencyTest.


        :param checked: The checked of this AudioFrequencyTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioFrequencyTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudioFrequencyTest):
            return True

        return self.to_dict() != other.to_dict()
