# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class MxfTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'as11_uk_dpp_metadata_test': 'As11UkDppMetadataTest',
        'as11_xprofile_test': 'As11XprofileTest',
        'operational_pattern_test': 'OperationalPatternTest',
        'version_test': 'VersionTest',
        'kag_size_test': 'KagSizeTest',
        'run_in_test': 'RunInTest',
        'wrapping_type_test': 'WrappingTypeTest',
        'source_package_timecode_test': 'TimecodeTrackTest',
        'material_package_timecode_test': 'TimecodeTrackTest',
        'sdti_timecode_continuity_test': 'SdtiTimecodeContinuityTest',
        'index_table_test': 'IndexTableTest',
        'index_table_location_test': 'LocationTest',
        'header_partition_status_test': 'PartitionStatusTest',
        'header_fill_test': 'HeaderFillTest',
        'header_byte_count_test': 'HeaderByteCountTest',
        'body_partition_status_test': 'PartitionStatusTest',
        'body_partition_count_test': 'LongMinMaxTest',
        'body_partition_duration_test': 'LongMinMaxTest',
        'body_partition_length_test': 'LongMinMaxTest',
        'footer_partition_status_test': 'PartitionStatusTest',
        'rip_present_test': 'RipPresentTest',
        'essence_location_test': 'LocationTest',
        'picture_essence_container_label_test': 'MxfKeyTest',
        'picture_element_key_test': 'MxfKeyTest',
        'picture_essence_coding_test': 'PictureEssenceCodingTest',
        'field_dominance_test': 'FieldDominanceTest',
        'signal_standard_test': 'SignalStandardTest',
        'picture_offsets_test': 'PictureOffsetsTest',
        'active_format_descriptor_test': 'ActiveFormatDescriptorTest',
        'color_siting_test': 'ColorSitingTest',
        'padding_bits_test': 'PaddingBitsTest',
        'color_range_test': 'ColorRangeTest',
        'subsampling_test': 'SubsamplingTest',
        'component_depth_test': 'ComponentDepthTest',
        'stored_frame_size_test': 'PicFrameSizeTest',
        'sampled_frame_size_test': 'PicFrameSizeTest',
        'display_frame_size_test': 'PicFrameSizeTest',
        'aspect_ratio_test': 'RatioTest',
        'pic_edit_rate_test': 'RatioTest',
        'reference_levels_test': 'ReferenceLevelsTest',
        'video_line_map_test': 'VideoLineMapTest',
        'video_descriptor_test': 'VideoDescriptorTest',
        'video_sub_descriptor_test': 'VideoSubDescriptorTest',
        'mpeg_bit_rate_test': 'LongMinMaxTest',
        'mpeg_identical_gop_test': 'ExtendedBoolValueTest',
        'mpeg_max_gop_test': 'LongMinMaxTest',
        'mpeg_max_bpic_count_test': 'LongMinMaxTest',
        'mpeg_constant_bpic_flag_test': 'ExtendedBoolValueTest',
        'mpeg_coded_content_test': 'LongValueTest',
        'avc_decoding_delay_test': 'LongValueTest',
        'avc_coded_content_kind_test': 'AvcCodedContentKindTest',
        'avc_identical_gop_indicator_test': 'BoolValueTest',
        'avc_max_gop_size_test': 'LongValueTest',
        'avc_max_bpic_count_test': 'LongValueTest',
        'avc_max_bit_rate_test': 'LongMinMaxTest',
        'avc_avg_bit_rate_test': 'LongMinMaxTest',
        'avc_sps_pps_test': 'AvcSpsPpsTest',
        'sound_essence_container_label_test': 'MxfKeyTest',
        'sound_element_key_test': 'MxfKeyTest',
        'sound_essence_coding_test': 'SoundEssenceCodingTest',
        'audio_sampling_rate_test': 'RatioTest',
        'audio_locked_test': 'BoolValueTest',
        'dialnorm_test': 'LongMinMaxTest',
        'audio_ref_level_test': 'LongMinMaxTest',
        'channel_count_test': 'LongValueTest',
        'quantization_bits_test': 'LongValueTest',
        'audio_avg_bytes_per_sec_test': 'LongMinMaxTest',
        'checked': 'bool'
    }

    attribute_map = {
        'as11_uk_dpp_metadata_test': 'as11_uk_dpp_metadata_test',
        'as11_xprofile_test': 'as11_xprofile_test',
        'operational_pattern_test': 'operational_pattern_test',
        'version_test': 'version_test',
        'kag_size_test': 'kag_size_test',
        'run_in_test': 'run_in_test',
        'wrapping_type_test': 'wrapping_type_test',
        'source_package_timecode_test': 'source_package_timecode_test',
        'material_package_timecode_test': 'material_package_timecode_test',
        'sdti_timecode_continuity_test': 'sdti_timecode_continuity_test',
        'index_table_test': 'index_table_test',
        'index_table_location_test': 'index_table_location_test',
        'header_partition_status_test': 'header_partition_status_test',
        'header_fill_test': 'header_fill_test',
        'header_byte_count_test': 'header_byte_count_test',
        'body_partition_status_test': 'body_partition_status_test',
        'body_partition_count_test': 'body_partition_count_test',
        'body_partition_duration_test': 'body_partition_duration_test',
        'body_partition_length_test': 'body_partition_length_test',
        'footer_partition_status_test': 'footer_partition_status_test',
        'rip_present_test': 'rip_present_test',
        'essence_location_test': 'essence_location_test',
        'picture_essence_container_label_test': 'picture_essence_container_label_test',
        'picture_element_key_test': 'picture_element_key_test',
        'picture_essence_coding_test': 'picture_essence_coding_test',
        'field_dominance_test': 'field_dominance_test',
        'signal_standard_test': 'signal_standard_test',
        'picture_offsets_test': 'picture_offsets_test',
        'active_format_descriptor_test': 'active_format_descriptor_test',
        'color_siting_test': 'color_siting_test',
        'padding_bits_test': 'padding_bits_test',
        'color_range_test': 'color_range_test',
        'subsampling_test': 'subsampling_test',
        'component_depth_test': 'component_depth_test',
        'stored_frame_size_test': 'stored_frame_size_test',
        'sampled_frame_size_test': 'sampled_frame_size_test',
        'display_frame_size_test': 'display_frame_size_test',
        'aspect_ratio_test': 'aspect_ratio_test',
        'pic_edit_rate_test': 'pic_edit_rate_test',
        'reference_levels_test': 'reference_levels_test',
        'video_line_map_test': 'video_line_map_test',
        'video_descriptor_test': 'video_descriptor_test',
        'video_sub_descriptor_test': 'video_sub_descriptor_test',
        'mpeg_bit_rate_test': 'mpeg_bit_rate_test',
        'mpeg_identical_gop_test': 'mpeg_identical_gop_test',
        'mpeg_max_gop_test': 'mpeg_max_gop_test',
        'mpeg_max_bpic_count_test': 'mpeg_max_bpic_count_test',
        'mpeg_constant_bpic_flag_test': 'mpeg_constant_bpic_flag_test',
        'mpeg_coded_content_test': 'mpeg_coded_content_test',
        'avc_decoding_delay_test': 'avc_decoding_delay_test',
        'avc_coded_content_kind_test': 'avc_coded_content_kind_test',
        'avc_identical_gop_indicator_test': 'avc_identical_gop_indicator_test',
        'avc_max_gop_size_test': 'avc_max_gop_size_test',
        'avc_max_bpic_count_test': 'avc_max_bpic_count_test',
        'avc_max_bit_rate_test': 'avc_max_bit_rate_test',
        'avc_avg_bit_rate_test': 'avc_avg_bit_rate_test',
        'avc_sps_pps_test': 'avc_sps_pps_test',
        'sound_essence_container_label_test': 'sound_essence_container_label_test',
        'sound_element_key_test': 'sound_element_key_test',
        'sound_essence_coding_test': 'sound_essence_coding_test',
        'audio_sampling_rate_test': 'audio_sampling_rate_test',
        'audio_locked_test': 'audio_locked_test',
        'dialnorm_test': 'dialnorm_test',
        'audio_ref_level_test': 'audio_ref_level_test',
        'channel_count_test': 'channel_count_test',
        'quantization_bits_test': 'quantization_bits_test',
        'audio_avg_bytes_per_sec_test': 'audio_avg_bytes_per_sec_test',
        'checked': 'checked'
    }

    def __init__(self, as11_uk_dpp_metadata_test=None, as11_xprofile_test=None, operational_pattern_test=None, version_test=None, kag_size_test=None, run_in_test=None, wrapping_type_test=None, source_package_timecode_test=None, material_package_timecode_test=None, sdti_timecode_continuity_test=None, index_table_test=None, index_table_location_test=None, header_partition_status_test=None, header_fill_test=None, header_byte_count_test=None, body_partition_status_test=None, body_partition_count_test=None, body_partition_duration_test=None, body_partition_length_test=None, footer_partition_status_test=None, rip_present_test=None, essence_location_test=None, picture_essence_container_label_test=None, picture_element_key_test=None, picture_essence_coding_test=None, field_dominance_test=None, signal_standard_test=None, picture_offsets_test=None, active_format_descriptor_test=None, color_siting_test=None, padding_bits_test=None, color_range_test=None, subsampling_test=None, component_depth_test=None, stored_frame_size_test=None, sampled_frame_size_test=None, display_frame_size_test=None, aspect_ratio_test=None, pic_edit_rate_test=None, reference_levels_test=None, video_line_map_test=None, video_descriptor_test=None, video_sub_descriptor_test=None, mpeg_bit_rate_test=None, mpeg_identical_gop_test=None, mpeg_max_gop_test=None, mpeg_max_bpic_count_test=None, mpeg_constant_bpic_flag_test=None, mpeg_coded_content_test=None, avc_decoding_delay_test=None, avc_coded_content_kind_test=None, avc_identical_gop_indicator_test=None, avc_max_gop_size_test=None, avc_max_bpic_count_test=None, avc_max_bit_rate_test=None, avc_avg_bit_rate_test=None, avc_sps_pps_test=None, sound_essence_container_label_test=None, sound_element_key_test=None, sound_essence_coding_test=None, audio_sampling_rate_test=None, audio_locked_test=None, dialnorm_test=None, audio_ref_level_test=None, channel_count_test=None, quantization_bits_test=None, audio_avg_bytes_per_sec_test=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """MxfTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._as11_uk_dpp_metadata_test = None
        self._as11_xprofile_test = None
        self._operational_pattern_test = None
        self._version_test = None
        self._kag_size_test = None
        self._run_in_test = None
        self._wrapping_type_test = None
        self._source_package_timecode_test = None
        self._material_package_timecode_test = None
        self._sdti_timecode_continuity_test = None
        self._index_table_test = None
        self._index_table_location_test = None
        self._header_partition_status_test = None
        self._header_fill_test = None
        self._header_byte_count_test = None
        self._body_partition_status_test = None
        self._body_partition_count_test = None
        self._body_partition_duration_test = None
        self._body_partition_length_test = None
        self._footer_partition_status_test = None
        self._rip_present_test = None
        self._essence_location_test = None
        self._picture_essence_container_label_test = None
        self._picture_element_key_test = None
        self._picture_essence_coding_test = None
        self._field_dominance_test = None
        self._signal_standard_test = None
        self._picture_offsets_test = None
        self._active_format_descriptor_test = None
        self._color_siting_test = None
        self._padding_bits_test = None
        self._color_range_test = None
        self._subsampling_test = None
        self._component_depth_test = None
        self._stored_frame_size_test = None
        self._sampled_frame_size_test = None
        self._display_frame_size_test = None
        self._aspect_ratio_test = None
        self._pic_edit_rate_test = None
        self._reference_levels_test = None
        self._video_line_map_test = None
        self._video_descriptor_test = None
        self._video_sub_descriptor_test = None
        self._mpeg_bit_rate_test = None
        self._mpeg_identical_gop_test = None
        self._mpeg_max_gop_test = None
        self._mpeg_max_bpic_count_test = None
        self._mpeg_constant_bpic_flag_test = None
        self._mpeg_coded_content_test = None
        self._avc_decoding_delay_test = None
        self._avc_coded_content_kind_test = None
        self._avc_identical_gop_indicator_test = None
        self._avc_max_gop_size_test = None
        self._avc_max_bpic_count_test = None
        self._avc_max_bit_rate_test = None
        self._avc_avg_bit_rate_test = None
        self._avc_sps_pps_test = None
        self._sound_essence_container_label_test = None
        self._sound_element_key_test = None
        self._sound_essence_coding_test = None
        self._audio_sampling_rate_test = None
        self._audio_locked_test = None
        self._dialnorm_test = None
        self._audio_ref_level_test = None
        self._channel_count_test = None
        self._quantization_bits_test = None
        self._audio_avg_bytes_per_sec_test = None
        self._checked = None
        self.discriminator = None

        if as11_uk_dpp_metadata_test is not None:
            self.as11_uk_dpp_metadata_test = as11_uk_dpp_metadata_test
        if as11_xprofile_test is not None:
            self.as11_xprofile_test = as11_xprofile_test
        if operational_pattern_test is not None:
            self.operational_pattern_test = operational_pattern_test
        if version_test is not None:
            self.version_test = version_test
        if kag_size_test is not None:
            self.kag_size_test = kag_size_test
        if run_in_test is not None:
            self.run_in_test = run_in_test
        if wrapping_type_test is not None:
            self.wrapping_type_test = wrapping_type_test
        if source_package_timecode_test is not None:
            self.source_package_timecode_test = source_package_timecode_test
        if material_package_timecode_test is not None:
            self.material_package_timecode_test = material_package_timecode_test
        if sdti_timecode_continuity_test is not None:
            self.sdti_timecode_continuity_test = sdti_timecode_continuity_test
        if index_table_test is not None:
            self.index_table_test = index_table_test
        if index_table_location_test is not None:
            self.index_table_location_test = index_table_location_test
        if header_partition_status_test is not None:
            self.header_partition_status_test = header_partition_status_test
        if header_fill_test is not None:
            self.header_fill_test = header_fill_test
        if header_byte_count_test is not None:
            self.header_byte_count_test = header_byte_count_test
        if body_partition_status_test is not None:
            self.body_partition_status_test = body_partition_status_test
        if body_partition_count_test is not None:
            self.body_partition_count_test = body_partition_count_test
        if body_partition_duration_test is not None:
            self.body_partition_duration_test = body_partition_duration_test
        if body_partition_length_test is not None:
            self.body_partition_length_test = body_partition_length_test
        if footer_partition_status_test is not None:
            self.footer_partition_status_test = footer_partition_status_test
        if rip_present_test is not None:
            self.rip_present_test = rip_present_test
        if essence_location_test is not None:
            self.essence_location_test = essence_location_test
        if picture_essence_container_label_test is not None:
            self.picture_essence_container_label_test = picture_essence_container_label_test
        if picture_element_key_test is not None:
            self.picture_element_key_test = picture_element_key_test
        if picture_essence_coding_test is not None:
            self.picture_essence_coding_test = picture_essence_coding_test
        if field_dominance_test is not None:
            self.field_dominance_test = field_dominance_test
        if signal_standard_test is not None:
            self.signal_standard_test = signal_standard_test
        if picture_offsets_test is not None:
            self.picture_offsets_test = picture_offsets_test
        if active_format_descriptor_test is not None:
            self.active_format_descriptor_test = active_format_descriptor_test
        if color_siting_test is not None:
            self.color_siting_test = color_siting_test
        if padding_bits_test is not None:
            self.padding_bits_test = padding_bits_test
        if color_range_test is not None:
            self.color_range_test = color_range_test
        if subsampling_test is not None:
            self.subsampling_test = subsampling_test
        if component_depth_test is not None:
            self.component_depth_test = component_depth_test
        if stored_frame_size_test is not None:
            self.stored_frame_size_test = stored_frame_size_test
        if sampled_frame_size_test is not None:
            self.sampled_frame_size_test = sampled_frame_size_test
        if display_frame_size_test is not None:
            self.display_frame_size_test = display_frame_size_test
        if aspect_ratio_test is not None:
            self.aspect_ratio_test = aspect_ratio_test
        if pic_edit_rate_test is not None:
            self.pic_edit_rate_test = pic_edit_rate_test
        if reference_levels_test is not None:
            self.reference_levels_test = reference_levels_test
        if video_line_map_test is not None:
            self.video_line_map_test = video_line_map_test
        if video_descriptor_test is not None:
            self.video_descriptor_test = video_descriptor_test
        if video_sub_descriptor_test is not None:
            self.video_sub_descriptor_test = video_sub_descriptor_test
        if mpeg_bit_rate_test is not None:
            self.mpeg_bit_rate_test = mpeg_bit_rate_test
        if mpeg_identical_gop_test is not None:
            self.mpeg_identical_gop_test = mpeg_identical_gop_test
        if mpeg_max_gop_test is not None:
            self.mpeg_max_gop_test = mpeg_max_gop_test
        if mpeg_max_bpic_count_test is not None:
            self.mpeg_max_bpic_count_test = mpeg_max_bpic_count_test
        if mpeg_constant_bpic_flag_test is not None:
            self.mpeg_constant_bpic_flag_test = mpeg_constant_bpic_flag_test
        if mpeg_coded_content_test is not None:
            self.mpeg_coded_content_test = mpeg_coded_content_test
        if avc_decoding_delay_test is not None:
            self.avc_decoding_delay_test = avc_decoding_delay_test
        if avc_coded_content_kind_test is not None:
            self.avc_coded_content_kind_test = avc_coded_content_kind_test
        if avc_identical_gop_indicator_test is not None:
            self.avc_identical_gop_indicator_test = avc_identical_gop_indicator_test
        if avc_max_gop_size_test is not None:
            self.avc_max_gop_size_test = avc_max_gop_size_test
        if avc_max_bpic_count_test is not None:
            self.avc_max_bpic_count_test = avc_max_bpic_count_test
        if avc_max_bit_rate_test is not None:
            self.avc_max_bit_rate_test = avc_max_bit_rate_test
        if avc_avg_bit_rate_test is not None:
            self.avc_avg_bit_rate_test = avc_avg_bit_rate_test
        if avc_sps_pps_test is not None:
            self.avc_sps_pps_test = avc_sps_pps_test
        if sound_essence_container_label_test is not None:
            self.sound_essence_container_label_test = sound_essence_container_label_test
        if sound_element_key_test is not None:
            self.sound_element_key_test = sound_element_key_test
        if sound_essence_coding_test is not None:
            self.sound_essence_coding_test = sound_essence_coding_test
        if audio_sampling_rate_test is not None:
            self.audio_sampling_rate_test = audio_sampling_rate_test
        if audio_locked_test is not None:
            self.audio_locked_test = audio_locked_test
        if dialnorm_test is not None:
            self.dialnorm_test = dialnorm_test
        if audio_ref_level_test is not None:
            self.audio_ref_level_test = audio_ref_level_test
        if channel_count_test is not None:
            self.channel_count_test = channel_count_test
        if quantization_bits_test is not None:
            self.quantization_bits_test = quantization_bits_test
        if audio_avg_bytes_per_sec_test is not None:
            self.audio_avg_bytes_per_sec_test = audio_avg_bytes_per_sec_test
        if checked is not None:
            self.checked = checked

    @property
    def as11_uk_dpp_metadata_test(self):
        """Gets the as11_uk_dpp_metadata_test of this MxfTest.  # noqa: E501


        :return: The as11_uk_dpp_metadata_test of this MxfTest.  # noqa: E501
        :rtype: As11UkDppMetadataTest
        """
        return self._as11_uk_dpp_metadata_test

    @as11_uk_dpp_metadata_test.setter
    def as11_uk_dpp_metadata_test(self, as11_uk_dpp_metadata_test):
        """Sets the as11_uk_dpp_metadata_test of this MxfTest.


        :param as11_uk_dpp_metadata_test: The as11_uk_dpp_metadata_test of this MxfTest.  # noqa: E501
        :type: As11UkDppMetadataTest
        """

        self._as11_uk_dpp_metadata_test = as11_uk_dpp_metadata_test

    @property
    def as11_xprofile_test(self):
        """Gets the as11_xprofile_test of this MxfTest.  # noqa: E501


        :return: The as11_xprofile_test of this MxfTest.  # noqa: E501
        :rtype: As11XprofileTest
        """
        return self._as11_xprofile_test

    @as11_xprofile_test.setter
    def as11_xprofile_test(self, as11_xprofile_test):
        """Sets the as11_xprofile_test of this MxfTest.


        :param as11_xprofile_test: The as11_xprofile_test of this MxfTest.  # noqa: E501
        :type: As11XprofileTest
        """

        self._as11_xprofile_test = as11_xprofile_test

    @property
    def operational_pattern_test(self):
        """Gets the operational_pattern_test of this MxfTest.  # noqa: E501


        :return: The operational_pattern_test of this MxfTest.  # noqa: E501
        :rtype: OperationalPatternTest
        """
        return self._operational_pattern_test

    @operational_pattern_test.setter
    def operational_pattern_test(self, operational_pattern_test):
        """Sets the operational_pattern_test of this MxfTest.


        :param operational_pattern_test: The operational_pattern_test of this MxfTest.  # noqa: E501
        :type: OperationalPatternTest
        """

        self._operational_pattern_test = operational_pattern_test

    @property
    def version_test(self):
        """Gets the version_test of this MxfTest.  # noqa: E501


        :return: The version_test of this MxfTest.  # noqa: E501
        :rtype: VersionTest
        """
        return self._version_test

    @version_test.setter
    def version_test(self, version_test):
        """Sets the version_test of this MxfTest.


        :param version_test: The version_test of this MxfTest.  # noqa: E501
        :type: VersionTest
        """

        self._version_test = version_test

    @property
    def kag_size_test(self):
        """Gets the kag_size_test of this MxfTest.  # noqa: E501


        :return: The kag_size_test of this MxfTest.  # noqa: E501
        :rtype: KagSizeTest
        """
        return self._kag_size_test

    @kag_size_test.setter
    def kag_size_test(self, kag_size_test):
        """Sets the kag_size_test of this MxfTest.


        :param kag_size_test: The kag_size_test of this MxfTest.  # noqa: E501
        :type: KagSizeTest
        """

        self._kag_size_test = kag_size_test

    @property
    def run_in_test(self):
        """Gets the run_in_test of this MxfTest.  # noqa: E501


        :return: The run_in_test of this MxfTest.  # noqa: E501
        :rtype: RunInTest
        """
        return self._run_in_test

    @run_in_test.setter
    def run_in_test(self, run_in_test):
        """Sets the run_in_test of this MxfTest.


        :param run_in_test: The run_in_test of this MxfTest.  # noqa: E501
        :type: RunInTest
        """

        self._run_in_test = run_in_test

    @property
    def wrapping_type_test(self):
        """Gets the wrapping_type_test of this MxfTest.  # noqa: E501


        :return: The wrapping_type_test of this MxfTest.  # noqa: E501
        :rtype: WrappingTypeTest
        """
        return self._wrapping_type_test

    @wrapping_type_test.setter
    def wrapping_type_test(self, wrapping_type_test):
        """Sets the wrapping_type_test of this MxfTest.


        :param wrapping_type_test: The wrapping_type_test of this MxfTest.  # noqa: E501
        :type: WrappingTypeTest
        """

        self._wrapping_type_test = wrapping_type_test

    @property
    def source_package_timecode_test(self):
        """Gets the source_package_timecode_test of this MxfTest.  # noqa: E501


        :return: The source_package_timecode_test of this MxfTest.  # noqa: E501
        :rtype: TimecodeTrackTest
        """
        return self._source_package_timecode_test

    @source_package_timecode_test.setter
    def source_package_timecode_test(self, source_package_timecode_test):
        """Sets the source_package_timecode_test of this MxfTest.


        :param source_package_timecode_test: The source_package_timecode_test of this MxfTest.  # noqa: E501
        :type: TimecodeTrackTest
        """

        self._source_package_timecode_test = source_package_timecode_test

    @property
    def material_package_timecode_test(self):
        """Gets the material_package_timecode_test of this MxfTest.  # noqa: E501


        :return: The material_package_timecode_test of this MxfTest.  # noqa: E501
        :rtype: TimecodeTrackTest
        """
        return self._material_package_timecode_test

    @material_package_timecode_test.setter
    def material_package_timecode_test(self, material_package_timecode_test):
        """Sets the material_package_timecode_test of this MxfTest.


        :param material_package_timecode_test: The material_package_timecode_test of this MxfTest.  # noqa: E501
        :type: TimecodeTrackTest
        """

        self._material_package_timecode_test = material_package_timecode_test

    @property
    def sdti_timecode_continuity_test(self):
        """Gets the sdti_timecode_continuity_test of this MxfTest.  # noqa: E501


        :return: The sdti_timecode_continuity_test of this MxfTest.  # noqa: E501
        :rtype: SdtiTimecodeContinuityTest
        """
        return self._sdti_timecode_continuity_test

    @sdti_timecode_continuity_test.setter
    def sdti_timecode_continuity_test(self, sdti_timecode_continuity_test):
        """Sets the sdti_timecode_continuity_test of this MxfTest.


        :param sdti_timecode_continuity_test: The sdti_timecode_continuity_test of this MxfTest.  # noqa: E501
        :type: SdtiTimecodeContinuityTest
        """

        self._sdti_timecode_continuity_test = sdti_timecode_continuity_test

    @property
    def index_table_test(self):
        """Gets the index_table_test of this MxfTest.  # noqa: E501


        :return: The index_table_test of this MxfTest.  # noqa: E501
        :rtype: IndexTableTest
        """
        return self._index_table_test

    @index_table_test.setter
    def index_table_test(self, index_table_test):
        """Sets the index_table_test of this MxfTest.


        :param index_table_test: The index_table_test of this MxfTest.  # noqa: E501
        :type: IndexTableTest
        """

        self._index_table_test = index_table_test

    @property
    def index_table_location_test(self):
        """Gets the index_table_location_test of this MxfTest.  # noqa: E501


        :return: The index_table_location_test of this MxfTest.  # noqa: E501
        :rtype: LocationTest
        """
        return self._index_table_location_test

    @index_table_location_test.setter
    def index_table_location_test(self, index_table_location_test):
        """Sets the index_table_location_test of this MxfTest.


        :param index_table_location_test: The index_table_location_test of this MxfTest.  # noqa: E501
        :type: LocationTest
        """

        self._index_table_location_test = index_table_location_test

    @property
    def header_partition_status_test(self):
        """Gets the header_partition_status_test of this MxfTest.  # noqa: E501


        :return: The header_partition_status_test of this MxfTest.  # noqa: E501
        :rtype: PartitionStatusTest
        """
        return self._header_partition_status_test

    @header_partition_status_test.setter
    def header_partition_status_test(self, header_partition_status_test):
        """Sets the header_partition_status_test of this MxfTest.


        :param header_partition_status_test: The header_partition_status_test of this MxfTest.  # noqa: E501
        :type: PartitionStatusTest
        """

        self._header_partition_status_test = header_partition_status_test

    @property
    def header_fill_test(self):
        """Gets the header_fill_test of this MxfTest.  # noqa: E501


        :return: The header_fill_test of this MxfTest.  # noqa: E501
        :rtype: HeaderFillTest
        """
        return self._header_fill_test

    @header_fill_test.setter
    def header_fill_test(self, header_fill_test):
        """Sets the header_fill_test of this MxfTest.


        :param header_fill_test: The header_fill_test of this MxfTest.  # noqa: E501
        :type: HeaderFillTest
        """

        self._header_fill_test = header_fill_test

    @property
    def header_byte_count_test(self):
        """Gets the header_byte_count_test of this MxfTest.  # noqa: E501


        :return: The header_byte_count_test of this MxfTest.  # noqa: E501
        :rtype: HeaderByteCountTest
        """
        return self._header_byte_count_test

    @header_byte_count_test.setter
    def header_byte_count_test(self, header_byte_count_test):
        """Sets the header_byte_count_test of this MxfTest.


        :param header_byte_count_test: The header_byte_count_test of this MxfTest.  # noqa: E501
        :type: HeaderByteCountTest
        """

        self._header_byte_count_test = header_byte_count_test

    @property
    def body_partition_status_test(self):
        """Gets the body_partition_status_test of this MxfTest.  # noqa: E501


        :return: The body_partition_status_test of this MxfTest.  # noqa: E501
        :rtype: PartitionStatusTest
        """
        return self._body_partition_status_test

    @body_partition_status_test.setter
    def body_partition_status_test(self, body_partition_status_test):
        """Sets the body_partition_status_test of this MxfTest.


        :param body_partition_status_test: The body_partition_status_test of this MxfTest.  # noqa: E501
        :type: PartitionStatusTest
        """

        self._body_partition_status_test = body_partition_status_test

    @property
    def body_partition_count_test(self):
        """Gets the body_partition_count_test of this MxfTest.  # noqa: E501


        :return: The body_partition_count_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._body_partition_count_test

    @body_partition_count_test.setter
    def body_partition_count_test(self, body_partition_count_test):
        """Sets the body_partition_count_test of this MxfTest.


        :param body_partition_count_test: The body_partition_count_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._body_partition_count_test = body_partition_count_test

    @property
    def body_partition_duration_test(self):
        """Gets the body_partition_duration_test of this MxfTest.  # noqa: E501


        :return: The body_partition_duration_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._body_partition_duration_test

    @body_partition_duration_test.setter
    def body_partition_duration_test(self, body_partition_duration_test):
        """Sets the body_partition_duration_test of this MxfTest.


        :param body_partition_duration_test: The body_partition_duration_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._body_partition_duration_test = body_partition_duration_test

    @property
    def body_partition_length_test(self):
        """Gets the body_partition_length_test of this MxfTest.  # noqa: E501


        :return: The body_partition_length_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._body_partition_length_test

    @body_partition_length_test.setter
    def body_partition_length_test(self, body_partition_length_test):
        """Sets the body_partition_length_test of this MxfTest.


        :param body_partition_length_test: The body_partition_length_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._body_partition_length_test = body_partition_length_test

    @property
    def footer_partition_status_test(self):
        """Gets the footer_partition_status_test of this MxfTest.  # noqa: E501


        :return: The footer_partition_status_test of this MxfTest.  # noqa: E501
        :rtype: PartitionStatusTest
        """
        return self._footer_partition_status_test

    @footer_partition_status_test.setter
    def footer_partition_status_test(self, footer_partition_status_test):
        """Sets the footer_partition_status_test of this MxfTest.


        :param footer_partition_status_test: The footer_partition_status_test of this MxfTest.  # noqa: E501
        :type: PartitionStatusTest
        """

        self._footer_partition_status_test = footer_partition_status_test

    @property
    def rip_present_test(self):
        """Gets the rip_present_test of this MxfTest.  # noqa: E501


        :return: The rip_present_test of this MxfTest.  # noqa: E501
        :rtype: RipPresentTest
        """
        return self._rip_present_test

    @rip_present_test.setter
    def rip_present_test(self, rip_present_test):
        """Sets the rip_present_test of this MxfTest.


        :param rip_present_test: The rip_present_test of this MxfTest.  # noqa: E501
        :type: RipPresentTest
        """

        self._rip_present_test = rip_present_test

    @property
    def essence_location_test(self):
        """Gets the essence_location_test of this MxfTest.  # noqa: E501


        :return: The essence_location_test of this MxfTest.  # noqa: E501
        :rtype: LocationTest
        """
        return self._essence_location_test

    @essence_location_test.setter
    def essence_location_test(self, essence_location_test):
        """Sets the essence_location_test of this MxfTest.


        :param essence_location_test: The essence_location_test of this MxfTest.  # noqa: E501
        :type: LocationTest
        """

        self._essence_location_test = essence_location_test

    @property
    def picture_essence_container_label_test(self):
        """Gets the picture_essence_container_label_test of this MxfTest.  # noqa: E501


        :return: The picture_essence_container_label_test of this MxfTest.  # noqa: E501
        :rtype: MxfKeyTest
        """
        return self._picture_essence_container_label_test

    @picture_essence_container_label_test.setter
    def picture_essence_container_label_test(self, picture_essence_container_label_test):
        """Sets the picture_essence_container_label_test of this MxfTest.


        :param picture_essence_container_label_test: The picture_essence_container_label_test of this MxfTest.  # noqa: E501
        :type: MxfKeyTest
        """

        self._picture_essence_container_label_test = picture_essence_container_label_test

    @property
    def picture_element_key_test(self):
        """Gets the picture_element_key_test of this MxfTest.  # noqa: E501


        :return: The picture_element_key_test of this MxfTest.  # noqa: E501
        :rtype: MxfKeyTest
        """
        return self._picture_element_key_test

    @picture_element_key_test.setter
    def picture_element_key_test(self, picture_element_key_test):
        """Sets the picture_element_key_test of this MxfTest.


        :param picture_element_key_test: The picture_element_key_test of this MxfTest.  # noqa: E501
        :type: MxfKeyTest
        """

        self._picture_element_key_test = picture_element_key_test

    @property
    def picture_essence_coding_test(self):
        """Gets the picture_essence_coding_test of this MxfTest.  # noqa: E501


        :return: The picture_essence_coding_test of this MxfTest.  # noqa: E501
        :rtype: PictureEssenceCodingTest
        """
        return self._picture_essence_coding_test

    @picture_essence_coding_test.setter
    def picture_essence_coding_test(self, picture_essence_coding_test):
        """Sets the picture_essence_coding_test of this MxfTest.


        :param picture_essence_coding_test: The picture_essence_coding_test of this MxfTest.  # noqa: E501
        :type: PictureEssenceCodingTest
        """

        self._picture_essence_coding_test = picture_essence_coding_test

    @property
    def field_dominance_test(self):
        """Gets the field_dominance_test of this MxfTest.  # noqa: E501


        :return: The field_dominance_test of this MxfTest.  # noqa: E501
        :rtype: FieldDominanceTest
        """
        return self._field_dominance_test

    @field_dominance_test.setter
    def field_dominance_test(self, field_dominance_test):
        """Sets the field_dominance_test of this MxfTest.


        :param field_dominance_test: The field_dominance_test of this MxfTest.  # noqa: E501
        :type: FieldDominanceTest
        """

        self._field_dominance_test = field_dominance_test

    @property
    def signal_standard_test(self):
        """Gets the signal_standard_test of this MxfTest.  # noqa: E501


        :return: The signal_standard_test of this MxfTest.  # noqa: E501
        :rtype: SignalStandardTest
        """
        return self._signal_standard_test

    @signal_standard_test.setter
    def signal_standard_test(self, signal_standard_test):
        """Sets the signal_standard_test of this MxfTest.


        :param signal_standard_test: The signal_standard_test of this MxfTest.  # noqa: E501
        :type: SignalStandardTest
        """

        self._signal_standard_test = signal_standard_test

    @property
    def picture_offsets_test(self):
        """Gets the picture_offsets_test of this MxfTest.  # noqa: E501


        :return: The picture_offsets_test of this MxfTest.  # noqa: E501
        :rtype: PictureOffsetsTest
        """
        return self._picture_offsets_test

    @picture_offsets_test.setter
    def picture_offsets_test(self, picture_offsets_test):
        """Sets the picture_offsets_test of this MxfTest.


        :param picture_offsets_test: The picture_offsets_test of this MxfTest.  # noqa: E501
        :type: PictureOffsetsTest
        """

        self._picture_offsets_test = picture_offsets_test

    @property
    def active_format_descriptor_test(self):
        """Gets the active_format_descriptor_test of this MxfTest.  # noqa: E501


        :return: The active_format_descriptor_test of this MxfTest.  # noqa: E501
        :rtype: ActiveFormatDescriptorTest
        """
        return self._active_format_descriptor_test

    @active_format_descriptor_test.setter
    def active_format_descriptor_test(self, active_format_descriptor_test):
        """Sets the active_format_descriptor_test of this MxfTest.


        :param active_format_descriptor_test: The active_format_descriptor_test of this MxfTest.  # noqa: E501
        :type: ActiveFormatDescriptorTest
        """

        self._active_format_descriptor_test = active_format_descriptor_test

    @property
    def color_siting_test(self):
        """Gets the color_siting_test of this MxfTest.  # noqa: E501


        :return: The color_siting_test of this MxfTest.  # noqa: E501
        :rtype: ColorSitingTest
        """
        return self._color_siting_test

    @color_siting_test.setter
    def color_siting_test(self, color_siting_test):
        """Sets the color_siting_test of this MxfTest.


        :param color_siting_test: The color_siting_test of this MxfTest.  # noqa: E501
        :type: ColorSitingTest
        """

        self._color_siting_test = color_siting_test

    @property
    def padding_bits_test(self):
        """Gets the padding_bits_test of this MxfTest.  # noqa: E501


        :return: The padding_bits_test of this MxfTest.  # noqa: E501
        :rtype: PaddingBitsTest
        """
        return self._padding_bits_test

    @padding_bits_test.setter
    def padding_bits_test(self, padding_bits_test):
        """Sets the padding_bits_test of this MxfTest.


        :param padding_bits_test: The padding_bits_test of this MxfTest.  # noqa: E501
        :type: PaddingBitsTest
        """

        self._padding_bits_test = padding_bits_test

    @property
    def color_range_test(self):
        """Gets the color_range_test of this MxfTest.  # noqa: E501


        :return: The color_range_test of this MxfTest.  # noqa: E501
        :rtype: ColorRangeTest
        """
        return self._color_range_test

    @color_range_test.setter
    def color_range_test(self, color_range_test):
        """Sets the color_range_test of this MxfTest.


        :param color_range_test: The color_range_test of this MxfTest.  # noqa: E501
        :type: ColorRangeTest
        """

        self._color_range_test = color_range_test

    @property
    def subsampling_test(self):
        """Gets the subsampling_test of this MxfTest.  # noqa: E501


        :return: The subsampling_test of this MxfTest.  # noqa: E501
        :rtype: SubsamplingTest
        """
        return self._subsampling_test

    @subsampling_test.setter
    def subsampling_test(self, subsampling_test):
        """Sets the subsampling_test of this MxfTest.


        :param subsampling_test: The subsampling_test of this MxfTest.  # noqa: E501
        :type: SubsamplingTest
        """

        self._subsampling_test = subsampling_test

    @property
    def component_depth_test(self):
        """Gets the component_depth_test of this MxfTest.  # noqa: E501


        :return: The component_depth_test of this MxfTest.  # noqa: E501
        :rtype: ComponentDepthTest
        """
        return self._component_depth_test

    @component_depth_test.setter
    def component_depth_test(self, component_depth_test):
        """Sets the component_depth_test of this MxfTest.


        :param component_depth_test: The component_depth_test of this MxfTest.  # noqa: E501
        :type: ComponentDepthTest
        """

        self._component_depth_test = component_depth_test

    @property
    def stored_frame_size_test(self):
        """Gets the stored_frame_size_test of this MxfTest.  # noqa: E501


        :return: The stored_frame_size_test of this MxfTest.  # noqa: E501
        :rtype: PicFrameSizeTest
        """
        return self._stored_frame_size_test

    @stored_frame_size_test.setter
    def stored_frame_size_test(self, stored_frame_size_test):
        """Sets the stored_frame_size_test of this MxfTest.


        :param stored_frame_size_test: The stored_frame_size_test of this MxfTest.  # noqa: E501
        :type: PicFrameSizeTest
        """

        self._stored_frame_size_test = stored_frame_size_test

    @property
    def sampled_frame_size_test(self):
        """Gets the sampled_frame_size_test of this MxfTest.  # noqa: E501


        :return: The sampled_frame_size_test of this MxfTest.  # noqa: E501
        :rtype: PicFrameSizeTest
        """
        return self._sampled_frame_size_test

    @sampled_frame_size_test.setter
    def sampled_frame_size_test(self, sampled_frame_size_test):
        """Sets the sampled_frame_size_test of this MxfTest.


        :param sampled_frame_size_test: The sampled_frame_size_test of this MxfTest.  # noqa: E501
        :type: PicFrameSizeTest
        """

        self._sampled_frame_size_test = sampled_frame_size_test

    @property
    def display_frame_size_test(self):
        """Gets the display_frame_size_test of this MxfTest.  # noqa: E501


        :return: The display_frame_size_test of this MxfTest.  # noqa: E501
        :rtype: PicFrameSizeTest
        """
        return self._display_frame_size_test

    @display_frame_size_test.setter
    def display_frame_size_test(self, display_frame_size_test):
        """Sets the display_frame_size_test of this MxfTest.


        :param display_frame_size_test: The display_frame_size_test of this MxfTest.  # noqa: E501
        :type: PicFrameSizeTest
        """

        self._display_frame_size_test = display_frame_size_test

    @property
    def aspect_ratio_test(self):
        """Gets the aspect_ratio_test of this MxfTest.  # noqa: E501


        :return: The aspect_ratio_test of this MxfTest.  # noqa: E501
        :rtype: RatioTest
        """
        return self._aspect_ratio_test

    @aspect_ratio_test.setter
    def aspect_ratio_test(self, aspect_ratio_test):
        """Sets the aspect_ratio_test of this MxfTest.


        :param aspect_ratio_test: The aspect_ratio_test of this MxfTest.  # noqa: E501
        :type: RatioTest
        """

        self._aspect_ratio_test = aspect_ratio_test

    @property
    def pic_edit_rate_test(self):
        """Gets the pic_edit_rate_test of this MxfTest.  # noqa: E501


        :return: The pic_edit_rate_test of this MxfTest.  # noqa: E501
        :rtype: RatioTest
        """
        return self._pic_edit_rate_test

    @pic_edit_rate_test.setter
    def pic_edit_rate_test(self, pic_edit_rate_test):
        """Sets the pic_edit_rate_test of this MxfTest.


        :param pic_edit_rate_test: The pic_edit_rate_test of this MxfTest.  # noqa: E501
        :type: RatioTest
        """

        self._pic_edit_rate_test = pic_edit_rate_test

    @property
    def reference_levels_test(self):
        """Gets the reference_levels_test of this MxfTest.  # noqa: E501


        :return: The reference_levels_test of this MxfTest.  # noqa: E501
        :rtype: ReferenceLevelsTest
        """
        return self._reference_levels_test

    @reference_levels_test.setter
    def reference_levels_test(self, reference_levels_test):
        """Sets the reference_levels_test of this MxfTest.


        :param reference_levels_test: The reference_levels_test of this MxfTest.  # noqa: E501
        :type: ReferenceLevelsTest
        """

        self._reference_levels_test = reference_levels_test

    @property
    def video_line_map_test(self):
        """Gets the video_line_map_test of this MxfTest.  # noqa: E501


        :return: The video_line_map_test of this MxfTest.  # noqa: E501
        :rtype: VideoLineMapTest
        """
        return self._video_line_map_test

    @video_line_map_test.setter
    def video_line_map_test(self, video_line_map_test):
        """Sets the video_line_map_test of this MxfTest.


        :param video_line_map_test: The video_line_map_test of this MxfTest.  # noqa: E501
        :type: VideoLineMapTest
        """

        self._video_line_map_test = video_line_map_test

    @property
    def video_descriptor_test(self):
        """Gets the video_descriptor_test of this MxfTest.  # noqa: E501


        :return: The video_descriptor_test of this MxfTest.  # noqa: E501
        :rtype: VideoDescriptorTest
        """
        return self._video_descriptor_test

    @video_descriptor_test.setter
    def video_descriptor_test(self, video_descriptor_test):
        """Sets the video_descriptor_test of this MxfTest.


        :param video_descriptor_test: The video_descriptor_test of this MxfTest.  # noqa: E501
        :type: VideoDescriptorTest
        """

        self._video_descriptor_test = video_descriptor_test

    @property
    def video_sub_descriptor_test(self):
        """Gets the video_sub_descriptor_test of this MxfTest.  # noqa: E501


        :return: The video_sub_descriptor_test of this MxfTest.  # noqa: E501
        :rtype: VideoSubDescriptorTest
        """
        return self._video_sub_descriptor_test

    @video_sub_descriptor_test.setter
    def video_sub_descriptor_test(self, video_sub_descriptor_test):
        """Sets the video_sub_descriptor_test of this MxfTest.


        :param video_sub_descriptor_test: The video_sub_descriptor_test of this MxfTest.  # noqa: E501
        :type: VideoSubDescriptorTest
        """

        self._video_sub_descriptor_test = video_sub_descriptor_test

    @property
    def mpeg_bit_rate_test(self):
        """Gets the mpeg_bit_rate_test of this MxfTest.  # noqa: E501


        :return: The mpeg_bit_rate_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._mpeg_bit_rate_test

    @mpeg_bit_rate_test.setter
    def mpeg_bit_rate_test(self, mpeg_bit_rate_test):
        """Sets the mpeg_bit_rate_test of this MxfTest.


        :param mpeg_bit_rate_test: The mpeg_bit_rate_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._mpeg_bit_rate_test = mpeg_bit_rate_test

    @property
    def mpeg_identical_gop_test(self):
        """Gets the mpeg_identical_gop_test of this MxfTest.  # noqa: E501


        :return: The mpeg_identical_gop_test of this MxfTest.  # noqa: E501
        :rtype: ExtendedBoolValueTest
        """
        return self._mpeg_identical_gop_test

    @mpeg_identical_gop_test.setter
    def mpeg_identical_gop_test(self, mpeg_identical_gop_test):
        """Sets the mpeg_identical_gop_test of this MxfTest.


        :param mpeg_identical_gop_test: The mpeg_identical_gop_test of this MxfTest.  # noqa: E501
        :type: ExtendedBoolValueTest
        """

        self._mpeg_identical_gop_test = mpeg_identical_gop_test

    @property
    def mpeg_max_gop_test(self):
        """Gets the mpeg_max_gop_test of this MxfTest.  # noqa: E501


        :return: The mpeg_max_gop_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._mpeg_max_gop_test

    @mpeg_max_gop_test.setter
    def mpeg_max_gop_test(self, mpeg_max_gop_test):
        """Sets the mpeg_max_gop_test of this MxfTest.


        :param mpeg_max_gop_test: The mpeg_max_gop_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._mpeg_max_gop_test = mpeg_max_gop_test

    @property
    def mpeg_max_bpic_count_test(self):
        """Gets the mpeg_max_bpic_count_test of this MxfTest.  # noqa: E501


        :return: The mpeg_max_bpic_count_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._mpeg_max_bpic_count_test

    @mpeg_max_bpic_count_test.setter
    def mpeg_max_bpic_count_test(self, mpeg_max_bpic_count_test):
        """Sets the mpeg_max_bpic_count_test of this MxfTest.


        :param mpeg_max_bpic_count_test: The mpeg_max_bpic_count_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._mpeg_max_bpic_count_test = mpeg_max_bpic_count_test

    @property
    def mpeg_constant_bpic_flag_test(self):
        """Gets the mpeg_constant_bpic_flag_test of this MxfTest.  # noqa: E501


        :return: The mpeg_constant_bpic_flag_test of this MxfTest.  # noqa: E501
        :rtype: ExtendedBoolValueTest
        """
        return self._mpeg_constant_bpic_flag_test

    @mpeg_constant_bpic_flag_test.setter
    def mpeg_constant_bpic_flag_test(self, mpeg_constant_bpic_flag_test):
        """Sets the mpeg_constant_bpic_flag_test of this MxfTest.


        :param mpeg_constant_bpic_flag_test: The mpeg_constant_bpic_flag_test of this MxfTest.  # noqa: E501
        :type: ExtendedBoolValueTest
        """

        self._mpeg_constant_bpic_flag_test = mpeg_constant_bpic_flag_test

    @property
    def mpeg_coded_content_test(self):
        """Gets the mpeg_coded_content_test of this MxfTest.  # noqa: E501


        :return: The mpeg_coded_content_test of this MxfTest.  # noqa: E501
        :rtype: LongValueTest
        """
        return self._mpeg_coded_content_test

    @mpeg_coded_content_test.setter
    def mpeg_coded_content_test(self, mpeg_coded_content_test):
        """Sets the mpeg_coded_content_test of this MxfTest.


        :param mpeg_coded_content_test: The mpeg_coded_content_test of this MxfTest.  # noqa: E501
        :type: LongValueTest
        """

        self._mpeg_coded_content_test = mpeg_coded_content_test

    @property
    def avc_decoding_delay_test(self):
        """Gets the avc_decoding_delay_test of this MxfTest.  # noqa: E501


        :return: The avc_decoding_delay_test of this MxfTest.  # noqa: E501
        :rtype: LongValueTest
        """
        return self._avc_decoding_delay_test

    @avc_decoding_delay_test.setter
    def avc_decoding_delay_test(self, avc_decoding_delay_test):
        """Sets the avc_decoding_delay_test of this MxfTest.


        :param avc_decoding_delay_test: The avc_decoding_delay_test of this MxfTest.  # noqa: E501
        :type: LongValueTest
        """

        self._avc_decoding_delay_test = avc_decoding_delay_test

    @property
    def avc_coded_content_kind_test(self):
        """Gets the avc_coded_content_kind_test of this MxfTest.  # noqa: E501


        :return: The avc_coded_content_kind_test of this MxfTest.  # noqa: E501
        :rtype: AvcCodedContentKindTest
        """
        return self._avc_coded_content_kind_test

    @avc_coded_content_kind_test.setter
    def avc_coded_content_kind_test(self, avc_coded_content_kind_test):
        """Sets the avc_coded_content_kind_test of this MxfTest.


        :param avc_coded_content_kind_test: The avc_coded_content_kind_test of this MxfTest.  # noqa: E501
        :type: AvcCodedContentKindTest
        """

        self._avc_coded_content_kind_test = avc_coded_content_kind_test

    @property
    def avc_identical_gop_indicator_test(self):
        """Gets the avc_identical_gop_indicator_test of this MxfTest.  # noqa: E501


        :return: The avc_identical_gop_indicator_test of this MxfTest.  # noqa: E501
        :rtype: BoolValueTest
        """
        return self._avc_identical_gop_indicator_test

    @avc_identical_gop_indicator_test.setter
    def avc_identical_gop_indicator_test(self, avc_identical_gop_indicator_test):
        """Sets the avc_identical_gop_indicator_test of this MxfTest.


        :param avc_identical_gop_indicator_test: The avc_identical_gop_indicator_test of this MxfTest.  # noqa: E501
        :type: BoolValueTest
        """

        self._avc_identical_gop_indicator_test = avc_identical_gop_indicator_test

    @property
    def avc_max_gop_size_test(self):
        """Gets the avc_max_gop_size_test of this MxfTest.  # noqa: E501


        :return: The avc_max_gop_size_test of this MxfTest.  # noqa: E501
        :rtype: LongValueTest
        """
        return self._avc_max_gop_size_test

    @avc_max_gop_size_test.setter
    def avc_max_gop_size_test(self, avc_max_gop_size_test):
        """Sets the avc_max_gop_size_test of this MxfTest.


        :param avc_max_gop_size_test: The avc_max_gop_size_test of this MxfTest.  # noqa: E501
        :type: LongValueTest
        """

        self._avc_max_gop_size_test = avc_max_gop_size_test

    @property
    def avc_max_bpic_count_test(self):
        """Gets the avc_max_bpic_count_test of this MxfTest.  # noqa: E501


        :return: The avc_max_bpic_count_test of this MxfTest.  # noqa: E501
        :rtype: LongValueTest
        """
        return self._avc_max_bpic_count_test

    @avc_max_bpic_count_test.setter
    def avc_max_bpic_count_test(self, avc_max_bpic_count_test):
        """Sets the avc_max_bpic_count_test of this MxfTest.


        :param avc_max_bpic_count_test: The avc_max_bpic_count_test of this MxfTest.  # noqa: E501
        :type: LongValueTest
        """

        self._avc_max_bpic_count_test = avc_max_bpic_count_test

    @property
    def avc_max_bit_rate_test(self):
        """Gets the avc_max_bit_rate_test of this MxfTest.  # noqa: E501


        :return: The avc_max_bit_rate_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._avc_max_bit_rate_test

    @avc_max_bit_rate_test.setter
    def avc_max_bit_rate_test(self, avc_max_bit_rate_test):
        """Sets the avc_max_bit_rate_test of this MxfTest.


        :param avc_max_bit_rate_test: The avc_max_bit_rate_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._avc_max_bit_rate_test = avc_max_bit_rate_test

    @property
    def avc_avg_bit_rate_test(self):
        """Gets the avc_avg_bit_rate_test of this MxfTest.  # noqa: E501


        :return: The avc_avg_bit_rate_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._avc_avg_bit_rate_test

    @avc_avg_bit_rate_test.setter
    def avc_avg_bit_rate_test(self, avc_avg_bit_rate_test):
        """Sets the avc_avg_bit_rate_test of this MxfTest.


        :param avc_avg_bit_rate_test: The avc_avg_bit_rate_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._avc_avg_bit_rate_test = avc_avg_bit_rate_test

    @property
    def avc_sps_pps_test(self):
        """Gets the avc_sps_pps_test of this MxfTest.  # noqa: E501


        :return: The avc_sps_pps_test of this MxfTest.  # noqa: E501
        :rtype: AvcSpsPpsTest
        """
        return self._avc_sps_pps_test

    @avc_sps_pps_test.setter
    def avc_sps_pps_test(self, avc_sps_pps_test):
        """Sets the avc_sps_pps_test of this MxfTest.


        :param avc_sps_pps_test: The avc_sps_pps_test of this MxfTest.  # noqa: E501
        :type: AvcSpsPpsTest
        """

        self._avc_sps_pps_test = avc_sps_pps_test

    @property
    def sound_essence_container_label_test(self):
        """Gets the sound_essence_container_label_test of this MxfTest.  # noqa: E501


        :return: The sound_essence_container_label_test of this MxfTest.  # noqa: E501
        :rtype: MxfKeyTest
        """
        return self._sound_essence_container_label_test

    @sound_essence_container_label_test.setter
    def sound_essence_container_label_test(self, sound_essence_container_label_test):
        """Sets the sound_essence_container_label_test of this MxfTest.


        :param sound_essence_container_label_test: The sound_essence_container_label_test of this MxfTest.  # noqa: E501
        :type: MxfKeyTest
        """

        self._sound_essence_container_label_test = sound_essence_container_label_test

    @property
    def sound_element_key_test(self):
        """Gets the sound_element_key_test of this MxfTest.  # noqa: E501


        :return: The sound_element_key_test of this MxfTest.  # noqa: E501
        :rtype: MxfKeyTest
        """
        return self._sound_element_key_test

    @sound_element_key_test.setter
    def sound_element_key_test(self, sound_element_key_test):
        """Sets the sound_element_key_test of this MxfTest.


        :param sound_element_key_test: The sound_element_key_test of this MxfTest.  # noqa: E501
        :type: MxfKeyTest
        """

        self._sound_element_key_test = sound_element_key_test

    @property
    def sound_essence_coding_test(self):
        """Gets the sound_essence_coding_test of this MxfTest.  # noqa: E501


        :return: The sound_essence_coding_test of this MxfTest.  # noqa: E501
        :rtype: SoundEssenceCodingTest
        """
        return self._sound_essence_coding_test

    @sound_essence_coding_test.setter
    def sound_essence_coding_test(self, sound_essence_coding_test):
        """Sets the sound_essence_coding_test of this MxfTest.


        :param sound_essence_coding_test: The sound_essence_coding_test of this MxfTest.  # noqa: E501
        :type: SoundEssenceCodingTest
        """

        self._sound_essence_coding_test = sound_essence_coding_test

    @property
    def audio_sampling_rate_test(self):
        """Gets the audio_sampling_rate_test of this MxfTest.  # noqa: E501


        :return: The audio_sampling_rate_test of this MxfTest.  # noqa: E501
        :rtype: RatioTest
        """
        return self._audio_sampling_rate_test

    @audio_sampling_rate_test.setter
    def audio_sampling_rate_test(self, audio_sampling_rate_test):
        """Sets the audio_sampling_rate_test of this MxfTest.


        :param audio_sampling_rate_test: The audio_sampling_rate_test of this MxfTest.  # noqa: E501
        :type: RatioTest
        """

        self._audio_sampling_rate_test = audio_sampling_rate_test

    @property
    def audio_locked_test(self):
        """Gets the audio_locked_test of this MxfTest.  # noqa: E501


        :return: The audio_locked_test of this MxfTest.  # noqa: E501
        :rtype: BoolValueTest
        """
        return self._audio_locked_test

    @audio_locked_test.setter
    def audio_locked_test(self, audio_locked_test):
        """Sets the audio_locked_test of this MxfTest.


        :param audio_locked_test: The audio_locked_test of this MxfTest.  # noqa: E501
        :type: BoolValueTest
        """

        self._audio_locked_test = audio_locked_test

    @property
    def dialnorm_test(self):
        """Gets the dialnorm_test of this MxfTest.  # noqa: E501


        :return: The dialnorm_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._dialnorm_test

    @dialnorm_test.setter
    def dialnorm_test(self, dialnorm_test):
        """Sets the dialnorm_test of this MxfTest.


        :param dialnorm_test: The dialnorm_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._dialnorm_test = dialnorm_test

    @property
    def audio_ref_level_test(self):
        """Gets the audio_ref_level_test of this MxfTest.  # noqa: E501


        :return: The audio_ref_level_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._audio_ref_level_test

    @audio_ref_level_test.setter
    def audio_ref_level_test(self, audio_ref_level_test):
        """Sets the audio_ref_level_test of this MxfTest.


        :param audio_ref_level_test: The audio_ref_level_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._audio_ref_level_test = audio_ref_level_test

    @property
    def channel_count_test(self):
        """Gets the channel_count_test of this MxfTest.  # noqa: E501


        :return: The channel_count_test of this MxfTest.  # noqa: E501
        :rtype: LongValueTest
        """
        return self._channel_count_test

    @channel_count_test.setter
    def channel_count_test(self, channel_count_test):
        """Sets the channel_count_test of this MxfTest.


        :param channel_count_test: The channel_count_test of this MxfTest.  # noqa: E501
        :type: LongValueTest
        """

        self._channel_count_test = channel_count_test

    @property
    def quantization_bits_test(self):
        """Gets the quantization_bits_test of this MxfTest.  # noqa: E501


        :return: The quantization_bits_test of this MxfTest.  # noqa: E501
        :rtype: LongValueTest
        """
        return self._quantization_bits_test

    @quantization_bits_test.setter
    def quantization_bits_test(self, quantization_bits_test):
        """Sets the quantization_bits_test of this MxfTest.


        :param quantization_bits_test: The quantization_bits_test of this MxfTest.  # noqa: E501
        :type: LongValueTest
        """

        self._quantization_bits_test = quantization_bits_test

    @property
    def audio_avg_bytes_per_sec_test(self):
        """Gets the audio_avg_bytes_per_sec_test of this MxfTest.  # noqa: E501


        :return: The audio_avg_bytes_per_sec_test of this MxfTest.  # noqa: E501
        :rtype: LongMinMaxTest
        """
        return self._audio_avg_bytes_per_sec_test

    @audio_avg_bytes_per_sec_test.setter
    def audio_avg_bytes_per_sec_test(self, audio_avg_bytes_per_sec_test):
        """Sets the audio_avg_bytes_per_sec_test of this MxfTest.


        :param audio_avg_bytes_per_sec_test: The audio_avg_bytes_per_sec_test of this MxfTest.  # noqa: E501
        :type: LongMinMaxTest
        """

        self._audio_avg_bytes_per_sec_test = audio_avg_bytes_per_sec_test

    @property
    def checked(self):
        """Gets the checked of this MxfTest.  # noqa: E501


        :return: The checked of this MxfTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this MxfTest.


        :param checked: The checked of this MxfTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MxfTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MxfTest):
            return True

        return self.to_dict() != other.to_dict()
