# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class LocationTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'header': 'OptionalFlag',
        'body': 'OptionalFlag',
        'footer': 'OptionalFlag',
        'header_or_body_or_footer': 'bool',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'header': 'header',
        'body': 'body',
        'footer': 'footer',
        'header_or_body_or_footer': 'header_or_body_or_footer',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, header=None, body=None, footer=None, header_or_body_or_footer=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """LocationTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._header = None
        self._body = None
        self._footer = None
        self._header_or_body_or_footer = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if header is not None:
            self.header = header
        if body is not None:
            self.body = body
        if footer is not None:
            self.footer = footer
        if header_or_body_or_footer is not None:
            self.header_or_body_or_footer = header_or_body_or_footer
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def header(self):
        """Gets the header of this LocationTest.  # noqa: E501


        :return: The header of this LocationTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this LocationTest.


        :param header: The header of this LocationTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._header = header

    @property
    def body(self):
        """Gets the body of this LocationTest.  # noqa: E501


        :return: The body of this LocationTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this LocationTest.


        :param body: The body of this LocationTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._body = body

    @property
    def footer(self):
        """Gets the footer of this LocationTest.  # noqa: E501


        :return: The footer of this LocationTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this LocationTest.


        :param footer: The footer of this LocationTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._footer = footer

    @property
    def header_or_body_or_footer(self):
        """Gets the header_or_body_or_footer of this LocationTest.  # noqa: E501


        :return: The header_or_body_or_footer of this LocationTest.  # noqa: E501
        :rtype: bool
        """
        return self._header_or_body_or_footer

    @header_or_body_or_footer.setter
    def header_or_body_or_footer(self, header_or_body_or_footer):
        """Sets the header_or_body_or_footer of this LocationTest.


        :param header_or_body_or_footer: The header_or_body_or_footer of this LocationTest.  # noqa: E501
        :type: bool
        """

        self._header_or_body_or_footer = header_or_body_or_footer

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this LocationTest.  # noqa: E501


        :return: The reject_on_error of this LocationTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this LocationTest.


        :param reject_on_error: The reject_on_error of this LocationTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this LocationTest.  # noqa: E501


        :return: The checked of this LocationTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this LocationTest.


        :param checked: The checked of this LocationTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationTest):
            return True

        return self.to_dict() != other.to_dict()
