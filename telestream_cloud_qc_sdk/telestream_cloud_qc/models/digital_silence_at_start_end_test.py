# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class DigitalSilenceAtStartEndTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'duration_at_start': 'float',
        'duration_at_end': 'float',
        'duration_secs_or_frames': 'SecsOrFramesType',
        'must_or_must_not_be_silent': 'MustOrMustNot',
        'channels': 'Channels',
        'reject_on_error': 'bool',
        'do_correction': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'duration_at_start': 'duration_at_start',
        'duration_at_end': 'duration_at_end',
        'duration_secs_or_frames': 'duration_secs_or_frames',
        'must_or_must_not_be_silent': 'must_or_must_not_be_silent',
        'channels': 'channels',
        'reject_on_error': 'reject_on_error',
        'do_correction': 'do_correction',
        'checked': 'checked'
    }

    def __init__(self, duration_at_start=None, duration_at_end=None, duration_secs_or_frames=None, must_or_must_not_be_silent=None, channels=None, reject_on_error=None, do_correction=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """DigitalSilenceAtStartEndTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._duration_at_start = None
        self._duration_at_end = None
        self._duration_secs_or_frames = None
        self._must_or_must_not_be_silent = None
        self._channels = None
        self._reject_on_error = None
        self._do_correction = None
        self._checked = None
        self.discriminator = None

        if duration_at_start is not None:
            self.duration_at_start = duration_at_start
        if duration_at_end is not None:
            self.duration_at_end = duration_at_end
        if duration_secs_or_frames is not None:
            self.duration_secs_or_frames = duration_secs_or_frames
        if must_or_must_not_be_silent is not None:
            self.must_or_must_not_be_silent = must_or_must_not_be_silent
        if channels is not None:
            self.channels = channels
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if do_correction is not None:
            self.do_correction = do_correction
        if checked is not None:
            self.checked = checked

    @property
    def duration_at_start(self):
        """Gets the duration_at_start of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The duration_at_start of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: float
        """
        return self._duration_at_start

    @duration_at_start.setter
    def duration_at_start(self, duration_at_start):
        """Sets the duration_at_start of this DigitalSilenceAtStartEndTest.


        :param duration_at_start: The duration_at_start of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: float
        """

        self._duration_at_start = duration_at_start

    @property
    def duration_at_end(self):
        """Gets the duration_at_end of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The duration_at_end of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: float
        """
        return self._duration_at_end

    @duration_at_end.setter
    def duration_at_end(self, duration_at_end):
        """Sets the duration_at_end of this DigitalSilenceAtStartEndTest.


        :param duration_at_end: The duration_at_end of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: float
        """

        self._duration_at_end = duration_at_end

    @property
    def duration_secs_or_frames(self):
        """Gets the duration_secs_or_frames of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The duration_secs_or_frames of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._duration_secs_or_frames

    @duration_secs_or_frames.setter
    def duration_secs_or_frames(self, duration_secs_or_frames):
        """Sets the duration_secs_or_frames of this DigitalSilenceAtStartEndTest.


        :param duration_secs_or_frames: The duration_secs_or_frames of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._duration_secs_or_frames = duration_secs_or_frames

    @property
    def must_or_must_not_be_silent(self):
        """Gets the must_or_must_not_be_silent of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The must_or_must_not_be_silent of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: MustOrMustNot
        """
        return self._must_or_must_not_be_silent

    @must_or_must_not_be_silent.setter
    def must_or_must_not_be_silent(self, must_or_must_not_be_silent):
        """Sets the must_or_must_not_be_silent of this DigitalSilenceAtStartEndTest.


        :param must_or_must_not_be_silent: The must_or_must_not_be_silent of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: MustOrMustNot
        """

        self._must_or_must_not_be_silent = must_or_must_not_be_silent

    @property
    def channels(self):
        """Gets the channels of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The channels of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: Channels
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this DigitalSilenceAtStartEndTest.


        :param channels: The channels of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: Channels
        """

        self._channels = channels

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The reject_on_error of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this DigitalSilenceAtStartEndTest.


        :param reject_on_error: The reject_on_error of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def do_correction(self):
        """Gets the do_correction of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The do_correction of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: bool
        """
        return self._do_correction

    @do_correction.setter
    def do_correction(self, do_correction):
        """Sets the do_correction of this DigitalSilenceAtStartEndTest.


        :param do_correction: The do_correction of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: bool
        """

        self._do_correction = do_correction

    @property
    def checked(self):
        """Gets the checked of this DigitalSilenceAtStartEndTest.  # noqa: E501


        :return: The checked of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this DigitalSilenceAtStartEndTest.


        :param checked: The checked of this DigitalSilenceAtStartEndTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DigitalSilenceAtStartEndTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DigitalSilenceAtStartEndTest):
            return True

        return self.to_dict() != other.to_dict()
