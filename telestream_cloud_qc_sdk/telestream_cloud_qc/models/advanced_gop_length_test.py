# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class AdvancedGopLengthTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_gop_enabled': 'bool',
        'first_gop_i': 'str',
        'first_gop_p': 'str',
        'first_gop_closed': 'OpenOrClosed',
        'other_gop_enabled': 'bool',
        'other_gop_i': 'str',
        'other_gop_p': 'str',
        'other_gop_closed': 'OpenOrClosed',
        'last_gop_enabled': 'bool',
        'last_gop_i': 'str',
        'last_gop_p': 'str',
        'last_gop_closed': 'OpenOrClosed',
        'order': 'GopOrder',
        'report': 'GopReport',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'first_gop_enabled': 'first_gop_enabled',
        'first_gop_i': 'first_gop_i',
        'first_gop_p': 'first_gop_p',
        'first_gop_closed': 'first_gop_closed',
        'other_gop_enabled': 'other_gop_enabled',
        'other_gop_i': 'other_gop_i',
        'other_gop_p': 'other_gop_p',
        'other_gop_closed': 'other_gop_closed',
        'last_gop_enabled': 'last_gop_enabled',
        'last_gop_i': 'last_gop_i',
        'last_gop_p': 'last_gop_p',
        'last_gop_closed': 'last_gop_closed',
        'order': 'order',
        'report': 'report',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, first_gop_enabled=None, first_gop_i=None, first_gop_p=None, first_gop_closed=None, other_gop_enabled=None, other_gop_i=None, other_gop_p=None, other_gop_closed=None, last_gop_enabled=None, last_gop_i=None, last_gop_p=None, last_gop_closed=None, order=None, report=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """AdvancedGopLengthTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_gop_enabled = None
        self._first_gop_i = None
        self._first_gop_p = None
        self._first_gop_closed = None
        self._other_gop_enabled = None
        self._other_gop_i = None
        self._other_gop_p = None
        self._other_gop_closed = None
        self._last_gop_enabled = None
        self._last_gop_i = None
        self._last_gop_p = None
        self._last_gop_closed = None
        self._order = None
        self._report = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if first_gop_enabled is not None:
            self.first_gop_enabled = first_gop_enabled
        if first_gop_i is not None:
            self.first_gop_i = first_gop_i
        if first_gop_p is not None:
            self.first_gop_p = first_gop_p
        if first_gop_closed is not None:
            self.first_gop_closed = first_gop_closed
        if other_gop_enabled is not None:
            self.other_gop_enabled = other_gop_enabled
        if other_gop_i is not None:
            self.other_gop_i = other_gop_i
        if other_gop_p is not None:
            self.other_gop_p = other_gop_p
        if other_gop_closed is not None:
            self.other_gop_closed = other_gop_closed
        if last_gop_enabled is not None:
            self.last_gop_enabled = last_gop_enabled
        if last_gop_i is not None:
            self.last_gop_i = last_gop_i
        if last_gop_p is not None:
            self.last_gop_p = last_gop_p
        if last_gop_closed is not None:
            self.last_gop_closed = last_gop_closed
        if order is not None:
            self.order = order
        if report is not None:
            self.report = report
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def first_gop_enabled(self):
        """Gets the first_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501


        :return: The first_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: bool
        """
        return self._first_gop_enabled

    @first_gop_enabled.setter
    def first_gop_enabled(self, first_gop_enabled):
        """Sets the first_gop_enabled of this AdvancedGopLengthTest.


        :param first_gop_enabled: The first_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501
        :type: bool
        """

        self._first_gop_enabled = first_gop_enabled

    @property
    def first_gop_i(self):
        """Gets the first_gop_i of this AdvancedGopLengthTest.  # noqa: E501


        :return: The first_gop_i of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: str
        """
        return self._first_gop_i

    @first_gop_i.setter
    def first_gop_i(self, first_gop_i):
        """Sets the first_gop_i of this AdvancedGopLengthTest.


        :param first_gop_i: The first_gop_i of this AdvancedGopLengthTest.  # noqa: E501
        :type: str
        """

        self._first_gop_i = first_gop_i

    @property
    def first_gop_p(self):
        """Gets the first_gop_p of this AdvancedGopLengthTest.  # noqa: E501


        :return: The first_gop_p of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: str
        """
        return self._first_gop_p

    @first_gop_p.setter
    def first_gop_p(self, first_gop_p):
        """Sets the first_gop_p of this AdvancedGopLengthTest.


        :param first_gop_p: The first_gop_p of this AdvancedGopLengthTest.  # noqa: E501
        :type: str
        """

        self._first_gop_p = first_gop_p

    @property
    def first_gop_closed(self):
        """Gets the first_gop_closed of this AdvancedGopLengthTest.  # noqa: E501


        :return: The first_gop_closed of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: OpenOrClosed
        """
        return self._first_gop_closed

    @first_gop_closed.setter
    def first_gop_closed(self, first_gop_closed):
        """Sets the first_gop_closed of this AdvancedGopLengthTest.


        :param first_gop_closed: The first_gop_closed of this AdvancedGopLengthTest.  # noqa: E501
        :type: OpenOrClosed
        """

        self._first_gop_closed = first_gop_closed

    @property
    def other_gop_enabled(self):
        """Gets the other_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501


        :return: The other_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: bool
        """
        return self._other_gop_enabled

    @other_gop_enabled.setter
    def other_gop_enabled(self, other_gop_enabled):
        """Sets the other_gop_enabled of this AdvancedGopLengthTest.


        :param other_gop_enabled: The other_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501
        :type: bool
        """

        self._other_gop_enabled = other_gop_enabled

    @property
    def other_gop_i(self):
        """Gets the other_gop_i of this AdvancedGopLengthTest.  # noqa: E501


        :return: The other_gop_i of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: str
        """
        return self._other_gop_i

    @other_gop_i.setter
    def other_gop_i(self, other_gop_i):
        """Sets the other_gop_i of this AdvancedGopLengthTest.


        :param other_gop_i: The other_gop_i of this AdvancedGopLengthTest.  # noqa: E501
        :type: str
        """

        self._other_gop_i = other_gop_i

    @property
    def other_gop_p(self):
        """Gets the other_gop_p of this AdvancedGopLengthTest.  # noqa: E501


        :return: The other_gop_p of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: str
        """
        return self._other_gop_p

    @other_gop_p.setter
    def other_gop_p(self, other_gop_p):
        """Sets the other_gop_p of this AdvancedGopLengthTest.


        :param other_gop_p: The other_gop_p of this AdvancedGopLengthTest.  # noqa: E501
        :type: str
        """

        self._other_gop_p = other_gop_p

    @property
    def other_gop_closed(self):
        """Gets the other_gop_closed of this AdvancedGopLengthTest.  # noqa: E501


        :return: The other_gop_closed of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: OpenOrClosed
        """
        return self._other_gop_closed

    @other_gop_closed.setter
    def other_gop_closed(self, other_gop_closed):
        """Sets the other_gop_closed of this AdvancedGopLengthTest.


        :param other_gop_closed: The other_gop_closed of this AdvancedGopLengthTest.  # noqa: E501
        :type: OpenOrClosed
        """

        self._other_gop_closed = other_gop_closed

    @property
    def last_gop_enabled(self):
        """Gets the last_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501


        :return: The last_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: bool
        """
        return self._last_gop_enabled

    @last_gop_enabled.setter
    def last_gop_enabled(self, last_gop_enabled):
        """Sets the last_gop_enabled of this AdvancedGopLengthTest.


        :param last_gop_enabled: The last_gop_enabled of this AdvancedGopLengthTest.  # noqa: E501
        :type: bool
        """

        self._last_gop_enabled = last_gop_enabled

    @property
    def last_gop_i(self):
        """Gets the last_gop_i of this AdvancedGopLengthTest.  # noqa: E501


        :return: The last_gop_i of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: str
        """
        return self._last_gop_i

    @last_gop_i.setter
    def last_gop_i(self, last_gop_i):
        """Sets the last_gop_i of this AdvancedGopLengthTest.


        :param last_gop_i: The last_gop_i of this AdvancedGopLengthTest.  # noqa: E501
        :type: str
        """

        self._last_gop_i = last_gop_i

    @property
    def last_gop_p(self):
        """Gets the last_gop_p of this AdvancedGopLengthTest.  # noqa: E501


        :return: The last_gop_p of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: str
        """
        return self._last_gop_p

    @last_gop_p.setter
    def last_gop_p(self, last_gop_p):
        """Sets the last_gop_p of this AdvancedGopLengthTest.


        :param last_gop_p: The last_gop_p of this AdvancedGopLengthTest.  # noqa: E501
        :type: str
        """

        self._last_gop_p = last_gop_p

    @property
    def last_gop_closed(self):
        """Gets the last_gop_closed of this AdvancedGopLengthTest.  # noqa: E501


        :return: The last_gop_closed of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: OpenOrClosed
        """
        return self._last_gop_closed

    @last_gop_closed.setter
    def last_gop_closed(self, last_gop_closed):
        """Sets the last_gop_closed of this AdvancedGopLengthTest.


        :param last_gop_closed: The last_gop_closed of this AdvancedGopLengthTest.  # noqa: E501
        :type: OpenOrClosed
        """

        self._last_gop_closed = last_gop_closed

    @property
    def order(self):
        """Gets the order of this AdvancedGopLengthTest.  # noqa: E501


        :return: The order of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: GopOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this AdvancedGopLengthTest.


        :param order: The order of this AdvancedGopLengthTest.  # noqa: E501
        :type: GopOrder
        """

        self._order = order

    @property
    def report(self):
        """Gets the report of this AdvancedGopLengthTest.  # noqa: E501


        :return: The report of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: GopReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this AdvancedGopLengthTest.


        :param report: The report of this AdvancedGopLengthTest.  # noqa: E501
        :type: GopReport
        """

        self._report = report

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this AdvancedGopLengthTest.  # noqa: E501


        :return: The reject_on_error of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this AdvancedGopLengthTest.


        :param reject_on_error: The reject_on_error of this AdvancedGopLengthTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this AdvancedGopLengthTest.  # noqa: E501


        :return: The checked of this AdvancedGopLengthTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this AdvancedGopLengthTest.


        :param checked: The checked of this AdvancedGopLengthTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedGopLengthTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedGopLengthTest):
            return True

        return self.to_dict() != other.to_dict()
