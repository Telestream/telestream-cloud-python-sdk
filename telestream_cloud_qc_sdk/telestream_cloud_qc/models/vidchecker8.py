# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class Vidchecker8(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audio_tests': 'AudioConfigs',
        'file_tests': 'FileConfig',
        'mxf_test': 'MxfTest',
        'video_tests': 'VideoConfigs'
    }

    attribute_map = {
        'audio_tests': 'audio_tests',
        'file_tests': 'file_tests',
        'mxf_test': 'mxf_test',
        'video_tests': 'video_tests'
    }

    def __init__(self, audio_tests=None, file_tests=None, mxf_test=None, video_tests=None, local_vars_configuration=None):  # noqa: E501
        """Vidchecker8 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audio_tests = None
        self._file_tests = None
        self._mxf_test = None
        self._video_tests = None
        self.discriminator = None

        if audio_tests is not None:
            self.audio_tests = audio_tests
        if file_tests is not None:
            self.file_tests = file_tests
        if mxf_test is not None:
            self.mxf_test = mxf_test
        if video_tests is not None:
            self.video_tests = video_tests

    @property
    def audio_tests(self):
        """Gets the audio_tests of this Vidchecker8.  # noqa: E501


        :return: The audio_tests of this Vidchecker8.  # noqa: E501
        :rtype: AudioConfigs
        """
        return self._audio_tests

    @audio_tests.setter
    def audio_tests(self, audio_tests):
        """Sets the audio_tests of this Vidchecker8.


        :param audio_tests: The audio_tests of this Vidchecker8.  # noqa: E501
        :type: AudioConfigs
        """

        self._audio_tests = audio_tests

    @property
    def file_tests(self):
        """Gets the file_tests of this Vidchecker8.  # noqa: E501


        :return: The file_tests of this Vidchecker8.  # noqa: E501
        :rtype: FileConfig
        """
        return self._file_tests

    @file_tests.setter
    def file_tests(self, file_tests):
        """Sets the file_tests of this Vidchecker8.


        :param file_tests: The file_tests of this Vidchecker8.  # noqa: E501
        :type: FileConfig
        """

        self._file_tests = file_tests

    @property
    def mxf_test(self):
        """Gets the mxf_test of this Vidchecker8.  # noqa: E501


        :return: The mxf_test of this Vidchecker8.  # noqa: E501
        :rtype: MxfTest
        """
        return self._mxf_test

    @mxf_test.setter
    def mxf_test(self, mxf_test):
        """Sets the mxf_test of this Vidchecker8.


        :param mxf_test: The mxf_test of this Vidchecker8.  # noqa: E501
        :type: MxfTest
        """

        self._mxf_test = mxf_test

    @property
    def video_tests(self):
        """Gets the video_tests of this Vidchecker8.  # noqa: E501


        :return: The video_tests of this Vidchecker8.  # noqa: E501
        :rtype: VideoConfigs
        """
        return self._video_tests

    @video_tests.setter
    def video_tests(self, video_tests):
        """Sets the video_tests of this Vidchecker8.


        :param video_tests: The video_tests of this Vidchecker8.  # noqa: E501
        :type: VideoConfigs
        """

        self._video_tests = video_tests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vidchecker8):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vidchecker8):
            return True

        return self.to_dict() != other.to_dict()
