# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class OperationalPatternTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'op1a': 'bool',
        'op2a': 'bool',
        'op3a': 'bool',
        'op1b': 'bool',
        'op2b': 'bool',
        'op3b': 'bool',
        'op1c': 'bool',
        'op2c': 'bool',
        'op3c': 'bool',
        'external_essence': 'OptionalFlag',
        'non_streamable': 'OptionalFlag',
        'multi_track': 'OptionalFlag',
        'op_atom': 'bool',
        'multi_source': 'OptionalFlag',
        'multi_essence': 'OptionalFlag',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'op1a': 'op1a',
        'op2a': 'op2a',
        'op3a': 'op3a',
        'op1b': 'op1b',
        'op2b': 'op2b',
        'op3b': 'op3b',
        'op1c': 'op1c',
        'op2c': 'op2c',
        'op3c': 'op3c',
        'external_essence': 'external_essence',
        'non_streamable': 'non_streamable',
        'multi_track': 'multi_track',
        'op_atom': 'op_atom',
        'multi_source': 'multi_source',
        'multi_essence': 'multi_essence',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, op1a=None, op2a=None, op3a=None, op1b=None, op2b=None, op3b=None, op1c=None, op2c=None, op3c=None, external_essence=None, non_streamable=None, multi_track=None, op_atom=None, multi_source=None, multi_essence=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """OperationalPatternTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._op1a = None
        self._op2a = None
        self._op3a = None
        self._op1b = None
        self._op2b = None
        self._op3b = None
        self._op1c = None
        self._op2c = None
        self._op3c = None
        self._external_essence = None
        self._non_streamable = None
        self._multi_track = None
        self._op_atom = None
        self._multi_source = None
        self._multi_essence = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if op1a is not None:
            self.op1a = op1a
        if op2a is not None:
            self.op2a = op2a
        if op3a is not None:
            self.op3a = op3a
        if op1b is not None:
            self.op1b = op1b
        if op2b is not None:
            self.op2b = op2b
        if op3b is not None:
            self.op3b = op3b
        if op1c is not None:
            self.op1c = op1c
        if op2c is not None:
            self.op2c = op2c
        if op3c is not None:
            self.op3c = op3c
        if external_essence is not None:
            self.external_essence = external_essence
        if non_streamable is not None:
            self.non_streamable = non_streamable
        if multi_track is not None:
            self.multi_track = multi_track
        if op_atom is not None:
            self.op_atom = op_atom
        if multi_source is not None:
            self.multi_source = multi_source
        if multi_essence is not None:
            self.multi_essence = multi_essence
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def op1a(self):
        """Gets the op1a of this OperationalPatternTest.  # noqa: E501


        :return: The op1a of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op1a

    @op1a.setter
    def op1a(self, op1a):
        """Sets the op1a of this OperationalPatternTest.


        :param op1a: The op1a of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op1a = op1a

    @property
    def op2a(self):
        """Gets the op2a of this OperationalPatternTest.  # noqa: E501


        :return: The op2a of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op2a

    @op2a.setter
    def op2a(self, op2a):
        """Sets the op2a of this OperationalPatternTest.


        :param op2a: The op2a of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op2a = op2a

    @property
    def op3a(self):
        """Gets the op3a of this OperationalPatternTest.  # noqa: E501


        :return: The op3a of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op3a

    @op3a.setter
    def op3a(self, op3a):
        """Sets the op3a of this OperationalPatternTest.


        :param op3a: The op3a of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op3a = op3a

    @property
    def op1b(self):
        """Gets the op1b of this OperationalPatternTest.  # noqa: E501


        :return: The op1b of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op1b

    @op1b.setter
    def op1b(self, op1b):
        """Sets the op1b of this OperationalPatternTest.


        :param op1b: The op1b of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op1b = op1b

    @property
    def op2b(self):
        """Gets the op2b of this OperationalPatternTest.  # noqa: E501


        :return: The op2b of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op2b

    @op2b.setter
    def op2b(self, op2b):
        """Sets the op2b of this OperationalPatternTest.


        :param op2b: The op2b of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op2b = op2b

    @property
    def op3b(self):
        """Gets the op3b of this OperationalPatternTest.  # noqa: E501


        :return: The op3b of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op3b

    @op3b.setter
    def op3b(self, op3b):
        """Sets the op3b of this OperationalPatternTest.


        :param op3b: The op3b of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op3b = op3b

    @property
    def op1c(self):
        """Gets the op1c of this OperationalPatternTest.  # noqa: E501


        :return: The op1c of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op1c

    @op1c.setter
    def op1c(self, op1c):
        """Sets the op1c of this OperationalPatternTest.


        :param op1c: The op1c of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op1c = op1c

    @property
    def op2c(self):
        """Gets the op2c of this OperationalPatternTest.  # noqa: E501


        :return: The op2c of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op2c

    @op2c.setter
    def op2c(self, op2c):
        """Sets the op2c of this OperationalPatternTest.


        :param op2c: The op2c of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op2c = op2c

    @property
    def op3c(self):
        """Gets the op3c of this OperationalPatternTest.  # noqa: E501


        :return: The op3c of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op3c

    @op3c.setter
    def op3c(self, op3c):
        """Sets the op3c of this OperationalPatternTest.


        :param op3c: The op3c of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op3c = op3c

    @property
    def external_essence(self):
        """Gets the external_essence of this OperationalPatternTest.  # noqa: E501


        :return: The external_essence of this OperationalPatternTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._external_essence

    @external_essence.setter
    def external_essence(self, external_essence):
        """Sets the external_essence of this OperationalPatternTest.


        :param external_essence: The external_essence of this OperationalPatternTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._external_essence = external_essence

    @property
    def non_streamable(self):
        """Gets the non_streamable of this OperationalPatternTest.  # noqa: E501


        :return: The non_streamable of this OperationalPatternTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._non_streamable

    @non_streamable.setter
    def non_streamable(self, non_streamable):
        """Sets the non_streamable of this OperationalPatternTest.


        :param non_streamable: The non_streamable of this OperationalPatternTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._non_streamable = non_streamable

    @property
    def multi_track(self):
        """Gets the multi_track of this OperationalPatternTest.  # noqa: E501


        :return: The multi_track of this OperationalPatternTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._multi_track

    @multi_track.setter
    def multi_track(self, multi_track):
        """Sets the multi_track of this OperationalPatternTest.


        :param multi_track: The multi_track of this OperationalPatternTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._multi_track = multi_track

    @property
    def op_atom(self):
        """Gets the op_atom of this OperationalPatternTest.  # noqa: E501


        :return: The op_atom of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._op_atom

    @op_atom.setter
    def op_atom(self, op_atom):
        """Sets the op_atom of this OperationalPatternTest.


        :param op_atom: The op_atom of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._op_atom = op_atom

    @property
    def multi_source(self):
        """Gets the multi_source of this OperationalPatternTest.  # noqa: E501


        :return: The multi_source of this OperationalPatternTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._multi_source

    @multi_source.setter
    def multi_source(self, multi_source):
        """Sets the multi_source of this OperationalPatternTest.


        :param multi_source: The multi_source of this OperationalPatternTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._multi_source = multi_source

    @property
    def multi_essence(self):
        """Gets the multi_essence of this OperationalPatternTest.  # noqa: E501


        :return: The multi_essence of this OperationalPatternTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._multi_essence

    @multi_essence.setter
    def multi_essence(self, multi_essence):
        """Sets the multi_essence of this OperationalPatternTest.


        :param multi_essence: The multi_essence of this OperationalPatternTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._multi_essence = multi_essence

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this OperationalPatternTest.  # noqa: E501


        :return: The reject_on_error of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this OperationalPatternTest.


        :param reject_on_error: The reject_on_error of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this OperationalPatternTest.  # noqa: E501


        :return: The checked of this OperationalPatternTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this OperationalPatternTest.


        :param checked: The checked of this OperationalPatternTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationalPatternTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationalPatternTest):
            return True

        return self.to_dict() != other.to_dict()
