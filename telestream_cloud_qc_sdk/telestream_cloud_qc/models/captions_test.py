# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class CaptionsTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'signal_enabled': 'bool',
        'signal_time': 'float',
        'signal_time_secs_or_frames': 'SecsOrFramesType',
        'content_enabled': 'bool',
        'content_time': 'float',
        'content_time_secs_or_frames': 'SecsOrFramesType',
        'line21_cea608_enabled': 'bool',
        'a53_cea608_enabled': 'bool',
        'a53_cea708_enabled': 'bool',
        'smpte436m_cea608_enabled': 'bool',
        'smpte436m_cea708_enabled': 'bool',
        'start_duration_ignore': 'float',
        'start_duration_secs_or_frames': 'SecsOrFramesType',
        'end_duration_ignore': 'float',
        'end_duration_secs_or_frames': 'SecsOrFramesType',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'signal_enabled': 'signal_enabled',
        'signal_time': 'signal_time',
        'signal_time_secs_or_frames': 'signal_time_secs_or_frames',
        'content_enabled': 'content_enabled',
        'content_time': 'content_time',
        'content_time_secs_or_frames': 'content_time_secs_or_frames',
        'line21_cea608_enabled': 'line21_cea608_enabled',
        'a53_cea608_enabled': 'a53_cea608_enabled',
        'a53_cea708_enabled': 'a53_cea708_enabled',
        'smpte436m_cea608_enabled': 'smpte436m_cea608_enabled',
        'smpte436m_cea708_enabled': 'smpte436m_cea708_enabled',
        'start_duration_ignore': 'start_duration_ignore',
        'start_duration_secs_or_frames': 'start_duration_secs_or_frames',
        'end_duration_ignore': 'end_duration_ignore',
        'end_duration_secs_or_frames': 'end_duration_secs_or_frames',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, signal_enabled=None, signal_time=None, signal_time_secs_or_frames=None, content_enabled=None, content_time=None, content_time_secs_or_frames=None, line21_cea608_enabled=None, a53_cea608_enabled=None, a53_cea708_enabled=None, smpte436m_cea608_enabled=None, smpte436m_cea708_enabled=None, start_duration_ignore=None, start_duration_secs_or_frames=None, end_duration_ignore=None, end_duration_secs_or_frames=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """CaptionsTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._signal_enabled = None
        self._signal_time = None
        self._signal_time_secs_or_frames = None
        self._content_enabled = None
        self._content_time = None
        self._content_time_secs_or_frames = None
        self._line21_cea608_enabled = None
        self._a53_cea608_enabled = None
        self._a53_cea708_enabled = None
        self._smpte436m_cea608_enabled = None
        self._smpte436m_cea708_enabled = None
        self._start_duration_ignore = None
        self._start_duration_secs_or_frames = None
        self._end_duration_ignore = None
        self._end_duration_secs_or_frames = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if signal_enabled is not None:
            self.signal_enabled = signal_enabled
        if signal_time is not None:
            self.signal_time = signal_time
        if signal_time_secs_or_frames is not None:
            self.signal_time_secs_or_frames = signal_time_secs_or_frames
        if content_enabled is not None:
            self.content_enabled = content_enabled
        if content_time is not None:
            self.content_time = content_time
        if content_time_secs_or_frames is not None:
            self.content_time_secs_or_frames = content_time_secs_or_frames
        if line21_cea608_enabled is not None:
            self.line21_cea608_enabled = line21_cea608_enabled
        if a53_cea608_enabled is not None:
            self.a53_cea608_enabled = a53_cea608_enabled
        if a53_cea708_enabled is not None:
            self.a53_cea708_enabled = a53_cea708_enabled
        if smpte436m_cea608_enabled is not None:
            self.smpte436m_cea608_enabled = smpte436m_cea608_enabled
        if smpte436m_cea708_enabled is not None:
            self.smpte436m_cea708_enabled = smpte436m_cea708_enabled
        if start_duration_ignore is not None:
            self.start_duration_ignore = start_duration_ignore
        if start_duration_secs_or_frames is not None:
            self.start_duration_secs_or_frames = start_duration_secs_or_frames
        if end_duration_ignore is not None:
            self.end_duration_ignore = end_duration_ignore
        if end_duration_secs_or_frames is not None:
            self.end_duration_secs_or_frames = end_duration_secs_or_frames
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def signal_enabled(self):
        """Gets the signal_enabled of this CaptionsTest.  # noqa: E501


        :return: The signal_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._signal_enabled

    @signal_enabled.setter
    def signal_enabled(self, signal_enabled):
        """Sets the signal_enabled of this CaptionsTest.


        :param signal_enabled: The signal_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._signal_enabled = signal_enabled

    @property
    def signal_time(self):
        """Gets the signal_time of this CaptionsTest.  # noqa: E501


        :return: The signal_time of this CaptionsTest.  # noqa: E501
        :rtype: float
        """
        return self._signal_time

    @signal_time.setter
    def signal_time(self, signal_time):
        """Sets the signal_time of this CaptionsTest.


        :param signal_time: The signal_time of this CaptionsTest.  # noqa: E501
        :type: float
        """

        self._signal_time = signal_time

    @property
    def signal_time_secs_or_frames(self):
        """Gets the signal_time_secs_or_frames of this CaptionsTest.  # noqa: E501


        :return: The signal_time_secs_or_frames of this CaptionsTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._signal_time_secs_or_frames

    @signal_time_secs_or_frames.setter
    def signal_time_secs_or_frames(self, signal_time_secs_or_frames):
        """Sets the signal_time_secs_or_frames of this CaptionsTest.


        :param signal_time_secs_or_frames: The signal_time_secs_or_frames of this CaptionsTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._signal_time_secs_or_frames = signal_time_secs_or_frames

    @property
    def content_enabled(self):
        """Gets the content_enabled of this CaptionsTest.  # noqa: E501


        :return: The content_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._content_enabled

    @content_enabled.setter
    def content_enabled(self, content_enabled):
        """Sets the content_enabled of this CaptionsTest.


        :param content_enabled: The content_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._content_enabled = content_enabled

    @property
    def content_time(self):
        """Gets the content_time of this CaptionsTest.  # noqa: E501


        :return: The content_time of this CaptionsTest.  # noqa: E501
        :rtype: float
        """
        return self._content_time

    @content_time.setter
    def content_time(self, content_time):
        """Sets the content_time of this CaptionsTest.


        :param content_time: The content_time of this CaptionsTest.  # noqa: E501
        :type: float
        """

        self._content_time = content_time

    @property
    def content_time_secs_or_frames(self):
        """Gets the content_time_secs_or_frames of this CaptionsTest.  # noqa: E501


        :return: The content_time_secs_or_frames of this CaptionsTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._content_time_secs_or_frames

    @content_time_secs_or_frames.setter
    def content_time_secs_or_frames(self, content_time_secs_or_frames):
        """Sets the content_time_secs_or_frames of this CaptionsTest.


        :param content_time_secs_or_frames: The content_time_secs_or_frames of this CaptionsTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._content_time_secs_or_frames = content_time_secs_or_frames

    @property
    def line21_cea608_enabled(self):
        """Gets the line21_cea608_enabled of this CaptionsTest.  # noqa: E501


        :return: The line21_cea608_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._line21_cea608_enabled

    @line21_cea608_enabled.setter
    def line21_cea608_enabled(self, line21_cea608_enabled):
        """Sets the line21_cea608_enabled of this CaptionsTest.


        :param line21_cea608_enabled: The line21_cea608_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._line21_cea608_enabled = line21_cea608_enabled

    @property
    def a53_cea608_enabled(self):
        """Gets the a53_cea608_enabled of this CaptionsTest.  # noqa: E501


        :return: The a53_cea608_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._a53_cea608_enabled

    @a53_cea608_enabled.setter
    def a53_cea608_enabled(self, a53_cea608_enabled):
        """Sets the a53_cea608_enabled of this CaptionsTest.


        :param a53_cea608_enabled: The a53_cea608_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._a53_cea608_enabled = a53_cea608_enabled

    @property
    def a53_cea708_enabled(self):
        """Gets the a53_cea708_enabled of this CaptionsTest.  # noqa: E501


        :return: The a53_cea708_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._a53_cea708_enabled

    @a53_cea708_enabled.setter
    def a53_cea708_enabled(self, a53_cea708_enabled):
        """Sets the a53_cea708_enabled of this CaptionsTest.


        :param a53_cea708_enabled: The a53_cea708_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._a53_cea708_enabled = a53_cea708_enabled

    @property
    def smpte436m_cea608_enabled(self):
        """Gets the smpte436m_cea608_enabled of this CaptionsTest.  # noqa: E501


        :return: The smpte436m_cea608_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._smpte436m_cea608_enabled

    @smpte436m_cea608_enabled.setter
    def smpte436m_cea608_enabled(self, smpte436m_cea608_enabled):
        """Sets the smpte436m_cea608_enabled of this CaptionsTest.


        :param smpte436m_cea608_enabled: The smpte436m_cea608_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._smpte436m_cea608_enabled = smpte436m_cea608_enabled

    @property
    def smpte436m_cea708_enabled(self):
        """Gets the smpte436m_cea708_enabled of this CaptionsTest.  # noqa: E501


        :return: The smpte436m_cea708_enabled of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._smpte436m_cea708_enabled

    @smpte436m_cea708_enabled.setter
    def smpte436m_cea708_enabled(self, smpte436m_cea708_enabled):
        """Sets the smpte436m_cea708_enabled of this CaptionsTest.


        :param smpte436m_cea708_enabled: The smpte436m_cea708_enabled of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._smpte436m_cea708_enabled = smpte436m_cea708_enabled

    @property
    def start_duration_ignore(self):
        """Gets the start_duration_ignore of this CaptionsTest.  # noqa: E501


        :return: The start_duration_ignore of this CaptionsTest.  # noqa: E501
        :rtype: float
        """
        return self._start_duration_ignore

    @start_duration_ignore.setter
    def start_duration_ignore(self, start_duration_ignore):
        """Sets the start_duration_ignore of this CaptionsTest.


        :param start_duration_ignore: The start_duration_ignore of this CaptionsTest.  # noqa: E501
        :type: float
        """

        self._start_duration_ignore = start_duration_ignore

    @property
    def start_duration_secs_or_frames(self):
        """Gets the start_duration_secs_or_frames of this CaptionsTest.  # noqa: E501


        :return: The start_duration_secs_or_frames of this CaptionsTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._start_duration_secs_or_frames

    @start_duration_secs_or_frames.setter
    def start_duration_secs_or_frames(self, start_duration_secs_or_frames):
        """Sets the start_duration_secs_or_frames of this CaptionsTest.


        :param start_duration_secs_or_frames: The start_duration_secs_or_frames of this CaptionsTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._start_duration_secs_or_frames = start_duration_secs_or_frames

    @property
    def end_duration_ignore(self):
        """Gets the end_duration_ignore of this CaptionsTest.  # noqa: E501


        :return: The end_duration_ignore of this CaptionsTest.  # noqa: E501
        :rtype: float
        """
        return self._end_duration_ignore

    @end_duration_ignore.setter
    def end_duration_ignore(self, end_duration_ignore):
        """Sets the end_duration_ignore of this CaptionsTest.


        :param end_duration_ignore: The end_duration_ignore of this CaptionsTest.  # noqa: E501
        :type: float
        """

        self._end_duration_ignore = end_duration_ignore

    @property
    def end_duration_secs_or_frames(self):
        """Gets the end_duration_secs_or_frames of this CaptionsTest.  # noqa: E501


        :return: The end_duration_secs_or_frames of this CaptionsTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._end_duration_secs_or_frames

    @end_duration_secs_or_frames.setter
    def end_duration_secs_or_frames(self, end_duration_secs_or_frames):
        """Sets the end_duration_secs_or_frames of this CaptionsTest.


        :param end_duration_secs_or_frames: The end_duration_secs_or_frames of this CaptionsTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._end_duration_secs_or_frames = end_duration_secs_or_frames

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this CaptionsTest.  # noqa: E501


        :return: The reject_on_error of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this CaptionsTest.


        :param reject_on_error: The reject_on_error of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this CaptionsTest.  # noqa: E501


        :return: The checked of this CaptionsTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this CaptionsTest.


        :param checked: The checked of this CaptionsTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CaptionsTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CaptionsTest):
            return True

        return self.to_dict() != other.to_dict()
