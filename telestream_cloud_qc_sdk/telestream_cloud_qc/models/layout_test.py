# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class LayoutTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'layout_type': 'LayoutType',
        'start_duration': 'float',
        'start_duration_secs_or_frames': 'SecsOrFramesType',
        'end_duration': 'float',
        'end_duration_secs_or_frames': 'SecsOrFramesType',
        'start_enabled': 'bool',
        'start_hours': 'int',
        'start_minutes': 'int',
        'start_seconds': 'int',
        'start_frames': 'int',
        'end_enabled': 'bool',
        'end_hours': 'int',
        'end_minutes': 'int',
        'end_seconds': 'int',
        'end_frames': 'int',
        'checked': 'bool'
    }

    attribute_map = {
        'layout_type': 'layout_type',
        'start_duration': 'start_duration',
        'start_duration_secs_or_frames': 'start_duration_secs_or_frames',
        'end_duration': 'end_duration',
        'end_duration_secs_or_frames': 'end_duration_secs_or_frames',
        'start_enabled': 'start_enabled',
        'start_hours': 'start_hours',
        'start_minutes': 'start_minutes',
        'start_seconds': 'start_seconds',
        'start_frames': 'start_frames',
        'end_enabled': 'end_enabled',
        'end_hours': 'end_hours',
        'end_minutes': 'end_minutes',
        'end_seconds': 'end_seconds',
        'end_frames': 'end_frames',
        'checked': 'checked'
    }

    def __init__(self, layout_type=None, start_duration=None, start_duration_secs_or_frames=None, end_duration=None, end_duration_secs_or_frames=None, start_enabled=None, start_hours=None, start_minutes=None, start_seconds=None, start_frames=None, end_enabled=None, end_hours=None, end_minutes=None, end_seconds=None, end_frames=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """LayoutTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._layout_type = None
        self._start_duration = None
        self._start_duration_secs_or_frames = None
        self._end_duration = None
        self._end_duration_secs_or_frames = None
        self._start_enabled = None
        self._start_hours = None
        self._start_minutes = None
        self._start_seconds = None
        self._start_frames = None
        self._end_enabled = None
        self._end_hours = None
        self._end_minutes = None
        self._end_seconds = None
        self._end_frames = None
        self._checked = None
        self.discriminator = None

        if layout_type is not None:
            self.layout_type = layout_type
        if start_duration is not None:
            self.start_duration = start_duration
        if start_duration_secs_or_frames is not None:
            self.start_duration_secs_or_frames = start_duration_secs_or_frames
        if end_duration is not None:
            self.end_duration = end_duration
        if end_duration_secs_or_frames is not None:
            self.end_duration_secs_or_frames = end_duration_secs_or_frames
        if start_enabled is not None:
            self.start_enabled = start_enabled
        if start_hours is not None:
            self.start_hours = start_hours
        if start_minutes is not None:
            self.start_minutes = start_minutes
        if start_seconds is not None:
            self.start_seconds = start_seconds
        if start_frames is not None:
            self.start_frames = start_frames
        if end_enabled is not None:
            self.end_enabled = end_enabled
        if end_hours is not None:
            self.end_hours = end_hours
        if end_minutes is not None:
            self.end_minutes = end_minutes
        if end_seconds is not None:
            self.end_seconds = end_seconds
        if end_frames is not None:
            self.end_frames = end_frames
        if checked is not None:
            self.checked = checked

    @property
    def layout_type(self):
        """Gets the layout_type of this LayoutTest.  # noqa: E501


        :return: The layout_type of this LayoutTest.  # noqa: E501
        :rtype: LayoutType
        """
        return self._layout_type

    @layout_type.setter
    def layout_type(self, layout_type):
        """Sets the layout_type of this LayoutTest.


        :param layout_type: The layout_type of this LayoutTest.  # noqa: E501
        :type: LayoutType
        """

        self._layout_type = layout_type

    @property
    def start_duration(self):
        """Gets the start_duration of this LayoutTest.  # noqa: E501


        :return: The start_duration of this LayoutTest.  # noqa: E501
        :rtype: float
        """
        return self._start_duration

    @start_duration.setter
    def start_duration(self, start_duration):
        """Sets the start_duration of this LayoutTest.


        :param start_duration: The start_duration of this LayoutTest.  # noqa: E501
        :type: float
        """

        self._start_duration = start_duration

    @property
    def start_duration_secs_or_frames(self):
        """Gets the start_duration_secs_or_frames of this LayoutTest.  # noqa: E501


        :return: The start_duration_secs_or_frames of this LayoutTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._start_duration_secs_or_frames

    @start_duration_secs_or_frames.setter
    def start_duration_secs_or_frames(self, start_duration_secs_or_frames):
        """Sets the start_duration_secs_or_frames of this LayoutTest.


        :param start_duration_secs_or_frames: The start_duration_secs_or_frames of this LayoutTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._start_duration_secs_or_frames = start_duration_secs_or_frames

    @property
    def end_duration(self):
        """Gets the end_duration of this LayoutTest.  # noqa: E501


        :return: The end_duration of this LayoutTest.  # noqa: E501
        :rtype: float
        """
        return self._end_duration

    @end_duration.setter
    def end_duration(self, end_duration):
        """Sets the end_duration of this LayoutTest.


        :param end_duration: The end_duration of this LayoutTest.  # noqa: E501
        :type: float
        """

        self._end_duration = end_duration

    @property
    def end_duration_secs_or_frames(self):
        """Gets the end_duration_secs_or_frames of this LayoutTest.  # noqa: E501


        :return: The end_duration_secs_or_frames of this LayoutTest.  # noqa: E501
        :rtype: SecsOrFramesType
        """
        return self._end_duration_secs_or_frames

    @end_duration_secs_or_frames.setter
    def end_duration_secs_or_frames(self, end_duration_secs_or_frames):
        """Sets the end_duration_secs_or_frames of this LayoutTest.


        :param end_duration_secs_or_frames: The end_duration_secs_or_frames of this LayoutTest.  # noqa: E501
        :type: SecsOrFramesType
        """

        self._end_duration_secs_or_frames = end_duration_secs_or_frames

    @property
    def start_enabled(self):
        """Gets the start_enabled of this LayoutTest.  # noqa: E501


        :return: The start_enabled of this LayoutTest.  # noqa: E501
        :rtype: bool
        """
        return self._start_enabled

    @start_enabled.setter
    def start_enabled(self, start_enabled):
        """Sets the start_enabled of this LayoutTest.


        :param start_enabled: The start_enabled of this LayoutTest.  # noqa: E501
        :type: bool
        """

        self._start_enabled = start_enabled

    @property
    def start_hours(self):
        """Gets the start_hours of this LayoutTest.  # noqa: E501


        :return: The start_hours of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._start_hours

    @start_hours.setter
    def start_hours(self, start_hours):
        """Sets the start_hours of this LayoutTest.


        :param start_hours: The start_hours of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._start_hours = start_hours

    @property
    def start_minutes(self):
        """Gets the start_minutes of this LayoutTest.  # noqa: E501


        :return: The start_minutes of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._start_minutes

    @start_minutes.setter
    def start_minutes(self, start_minutes):
        """Sets the start_minutes of this LayoutTest.


        :param start_minutes: The start_minutes of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._start_minutes = start_minutes

    @property
    def start_seconds(self):
        """Gets the start_seconds of this LayoutTest.  # noqa: E501


        :return: The start_seconds of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._start_seconds

    @start_seconds.setter
    def start_seconds(self, start_seconds):
        """Sets the start_seconds of this LayoutTest.


        :param start_seconds: The start_seconds of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._start_seconds = start_seconds

    @property
    def start_frames(self):
        """Gets the start_frames of this LayoutTest.  # noqa: E501


        :return: The start_frames of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._start_frames

    @start_frames.setter
    def start_frames(self, start_frames):
        """Sets the start_frames of this LayoutTest.


        :param start_frames: The start_frames of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._start_frames = start_frames

    @property
    def end_enabled(self):
        """Gets the end_enabled of this LayoutTest.  # noqa: E501


        :return: The end_enabled of this LayoutTest.  # noqa: E501
        :rtype: bool
        """
        return self._end_enabled

    @end_enabled.setter
    def end_enabled(self, end_enabled):
        """Sets the end_enabled of this LayoutTest.


        :param end_enabled: The end_enabled of this LayoutTest.  # noqa: E501
        :type: bool
        """

        self._end_enabled = end_enabled

    @property
    def end_hours(self):
        """Gets the end_hours of this LayoutTest.  # noqa: E501


        :return: The end_hours of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._end_hours

    @end_hours.setter
    def end_hours(self, end_hours):
        """Sets the end_hours of this LayoutTest.


        :param end_hours: The end_hours of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._end_hours = end_hours

    @property
    def end_minutes(self):
        """Gets the end_minutes of this LayoutTest.  # noqa: E501


        :return: The end_minutes of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._end_minutes

    @end_minutes.setter
    def end_minutes(self, end_minutes):
        """Sets the end_minutes of this LayoutTest.


        :param end_minutes: The end_minutes of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._end_minutes = end_minutes

    @property
    def end_seconds(self):
        """Gets the end_seconds of this LayoutTest.  # noqa: E501


        :return: The end_seconds of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._end_seconds

    @end_seconds.setter
    def end_seconds(self, end_seconds):
        """Sets the end_seconds of this LayoutTest.


        :param end_seconds: The end_seconds of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._end_seconds = end_seconds

    @property
    def end_frames(self):
        """Gets the end_frames of this LayoutTest.  # noqa: E501


        :return: The end_frames of this LayoutTest.  # noqa: E501
        :rtype: int
        """
        return self._end_frames

    @end_frames.setter
    def end_frames(self, end_frames):
        """Sets the end_frames of this LayoutTest.


        :param end_frames: The end_frames of this LayoutTest.  # noqa: E501
        :type: int
        """

        self._end_frames = end_frames

    @property
    def checked(self):
        """Gets the checked of this LayoutTest.  # noqa: E501


        :return: The checked of this LayoutTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this LayoutTest.


        :param checked: The checked of this LayoutTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayoutTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LayoutTest):
            return True

        return self.to_dict() != other.to_dict()
