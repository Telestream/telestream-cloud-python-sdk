# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class LetterboxingTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ratio_or_lines': 'RatioOrLinesType',
        'ratio_horizontal': 'int',
        'ratio_vertical': 'int',
        'lines_top_and_bottom': 'int',
        'lines_left_and_right': 'int',
        'tolerance': 'int',
        'black_level_default_or_custom': 'DefaultOrCustomType',
        'black_level': 'int',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'ratio_or_lines': 'ratio_or_lines',
        'ratio_horizontal': 'ratio_horizontal',
        'ratio_vertical': 'ratio_vertical',
        'lines_top_and_bottom': 'lines_top_and_bottom',
        'lines_left_and_right': 'lines_left_and_right',
        'tolerance': 'tolerance',
        'black_level_default_or_custom': 'black_level_default_or_custom',
        'black_level': 'black_level',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, ratio_or_lines=None, ratio_horizontal=None, ratio_vertical=None, lines_top_and_bottom=None, lines_left_and_right=None, tolerance=None, black_level_default_or_custom=None, black_level=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """LetterboxingTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ratio_or_lines = None
        self._ratio_horizontal = None
        self._ratio_vertical = None
        self._lines_top_and_bottom = None
        self._lines_left_and_right = None
        self._tolerance = None
        self._black_level_default_or_custom = None
        self._black_level = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if ratio_or_lines is not None:
            self.ratio_or_lines = ratio_or_lines
        if ratio_horizontal is not None:
            self.ratio_horizontal = ratio_horizontal
        if ratio_vertical is not None:
            self.ratio_vertical = ratio_vertical
        if lines_top_and_bottom is not None:
            self.lines_top_and_bottom = lines_top_and_bottom
        if lines_left_and_right is not None:
            self.lines_left_and_right = lines_left_and_right
        if tolerance is not None:
            self.tolerance = tolerance
        if black_level_default_or_custom is not None:
            self.black_level_default_or_custom = black_level_default_or_custom
        if black_level is not None:
            self.black_level = black_level
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def ratio_or_lines(self):
        """Gets the ratio_or_lines of this LetterboxingTest.  # noqa: E501


        :return: The ratio_or_lines of this LetterboxingTest.  # noqa: E501
        :rtype: RatioOrLinesType
        """
        return self._ratio_or_lines

    @ratio_or_lines.setter
    def ratio_or_lines(self, ratio_or_lines):
        """Sets the ratio_or_lines of this LetterboxingTest.


        :param ratio_or_lines: The ratio_or_lines of this LetterboxingTest.  # noqa: E501
        :type: RatioOrLinesType
        """

        self._ratio_or_lines = ratio_or_lines

    @property
    def ratio_horizontal(self):
        """Gets the ratio_horizontal of this LetterboxingTest.  # noqa: E501


        :return: The ratio_horizontal of this LetterboxingTest.  # noqa: E501
        :rtype: int
        """
        return self._ratio_horizontal

    @ratio_horizontal.setter
    def ratio_horizontal(self, ratio_horizontal):
        """Sets the ratio_horizontal of this LetterboxingTest.


        :param ratio_horizontal: The ratio_horizontal of this LetterboxingTest.  # noqa: E501
        :type: int
        """

        self._ratio_horizontal = ratio_horizontal

    @property
    def ratio_vertical(self):
        """Gets the ratio_vertical of this LetterboxingTest.  # noqa: E501


        :return: The ratio_vertical of this LetterboxingTest.  # noqa: E501
        :rtype: int
        """
        return self._ratio_vertical

    @ratio_vertical.setter
    def ratio_vertical(self, ratio_vertical):
        """Sets the ratio_vertical of this LetterboxingTest.


        :param ratio_vertical: The ratio_vertical of this LetterboxingTest.  # noqa: E501
        :type: int
        """

        self._ratio_vertical = ratio_vertical

    @property
    def lines_top_and_bottom(self):
        """Gets the lines_top_and_bottom of this LetterboxingTest.  # noqa: E501


        :return: The lines_top_and_bottom of this LetterboxingTest.  # noqa: E501
        :rtype: int
        """
        return self._lines_top_and_bottom

    @lines_top_and_bottom.setter
    def lines_top_and_bottom(self, lines_top_and_bottom):
        """Sets the lines_top_and_bottom of this LetterboxingTest.


        :param lines_top_and_bottom: The lines_top_and_bottom of this LetterboxingTest.  # noqa: E501
        :type: int
        """

        self._lines_top_and_bottom = lines_top_and_bottom

    @property
    def lines_left_and_right(self):
        """Gets the lines_left_and_right of this LetterboxingTest.  # noqa: E501


        :return: The lines_left_and_right of this LetterboxingTest.  # noqa: E501
        :rtype: int
        """
        return self._lines_left_and_right

    @lines_left_and_right.setter
    def lines_left_and_right(self, lines_left_and_right):
        """Sets the lines_left_and_right of this LetterboxingTest.


        :param lines_left_and_right: The lines_left_and_right of this LetterboxingTest.  # noqa: E501
        :type: int
        """

        self._lines_left_and_right = lines_left_and_right

    @property
    def tolerance(self):
        """Gets the tolerance of this LetterboxingTest.  # noqa: E501


        :return: The tolerance of this LetterboxingTest.  # noqa: E501
        :rtype: int
        """
        return self._tolerance

    @tolerance.setter
    def tolerance(self, tolerance):
        """Sets the tolerance of this LetterboxingTest.


        :param tolerance: The tolerance of this LetterboxingTest.  # noqa: E501
        :type: int
        """

        self._tolerance = tolerance

    @property
    def black_level_default_or_custom(self):
        """Gets the black_level_default_or_custom of this LetterboxingTest.  # noqa: E501


        :return: The black_level_default_or_custom of this LetterboxingTest.  # noqa: E501
        :rtype: DefaultOrCustomType
        """
        return self._black_level_default_or_custom

    @black_level_default_or_custom.setter
    def black_level_default_or_custom(self, black_level_default_or_custom):
        """Sets the black_level_default_or_custom of this LetterboxingTest.


        :param black_level_default_or_custom: The black_level_default_or_custom of this LetterboxingTest.  # noqa: E501
        :type: DefaultOrCustomType
        """

        self._black_level_default_or_custom = black_level_default_or_custom

    @property
    def black_level(self):
        """Gets the black_level of this LetterboxingTest.  # noqa: E501


        :return: The black_level of this LetterboxingTest.  # noqa: E501
        :rtype: int
        """
        return self._black_level

    @black_level.setter
    def black_level(self, black_level):
        """Sets the black_level of this LetterboxingTest.


        :param black_level: The black_level of this LetterboxingTest.  # noqa: E501
        :type: int
        """

        self._black_level = black_level

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this LetterboxingTest.  # noqa: E501


        :return: The reject_on_error of this LetterboxingTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this LetterboxingTest.


        :param reject_on_error: The reject_on_error of this LetterboxingTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this LetterboxingTest.  # noqa: E501


        :return: The checked of this LetterboxingTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this LetterboxingTest.


        :param checked: The checked of this LetterboxingTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LetterboxingTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LetterboxingTest):
            return True

        return self.to_dict() != other.to_dict()
