# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class VideoLevelType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    VIDEOLEVELNONE = "VideoLevelNone"
    VC1LEVELLOW = "Vc1LevelLow"
    VC1LEVELMEDIUM = "Vc1LevelMedium"
    VC1LEVELHIGH = "Vc1LevelHigh"
    VC1LEVELL0 = "Vc1LevelL0"
    VC1LEVELL1 = "Vc1LevelL1"
    VC1LEVELL2 = "Vc1LevelL2"
    VC1LEVELL3 = "Vc1LevelL3"
    VC1LEVELL4 = "Vc1LevelL4"
    H264LEVEL10 = "H264Level10"
    H264LEVEL1B = "H264Level1b"
    H264LEVEL11 = "H264Level11"
    H264LEVEL12 = "H264Level12"
    H264LEVEL13 = "H264Level13"
    H264LEVEL20 = "H264Level20"
    H264LEVEL21 = "H264Level21"
    H264LEVEL22 = "H264Level22"
    H264LEVEL30 = "H264Level30"
    H264LEVEL31 = "H264Level31"
    H264LEVEL32 = "H264Level32"
    H264LEVEL40 = "H264Level40"
    H264LEVEL41 = "H264Level41"
    H264LEVEL42 = "H264Level42"
    H264LEVEL50 = "H264Level50"
    H264LEVEL51 = "H264Level51"
    MPEG2LEVELLOW = "Mpeg2LevelLow"
    MPEG2LEVELMAIN = "Mpeg2LevelMain"
    MPEG2LEVELHIGH1440 = "Mpeg2LevelHigh1440"
    MPEG2LEVELHIGH = "Mpeg2LevelHigh"
    H264LEVEL52 = "H264Level52"
    HEVCLEVEL10MAIN = "HevcLevel10Main"
    HEVCLEVEL20MAIN = "HevcLevel20Main"
    HEVCLEVEL21MAIN = "HevcLevel21Main"
    HEVCLEVEL30MAIN = "HevcLevel30Main"
    HEVCLEVEL31MAIN = "HevcLevel31Main"
    HEVCLEVEL40MAIN = "HevcLevel40Main"
    HEVCLEVEL40HIGH = "HevcLevel40High"
    HEVCLEVEL41MAIN = "HevcLevel41Main"
    HEVCLEVEL41HIGH = "HevcLevel41High"
    HEVCLEVEL50MAIN = "HevcLevel50Main"
    HEVCLEVEL50HIGH = "HevcLevel50High"
    HEVCLEVEL51MAIN = "HevcLevel51Main"
    HEVCLEVEL51HIGH = "HevcLevel51High"
    HEVCLEVEL52MAIN = "HevcLevel52Main"
    HEVCLEVEL52HIGH = "HevcLevel52High"
    HEVCLEVEL60MAIN = "HevcLevel60Main"
    HEVCLEVEL60HIGH = "HevcLevel60High"
    HEVCLEVEL61MAIN = "HevcLevel61Main"
    HEVCLEVEL61HIGH = "HevcLevel61High"
    HEVCLEVEL62MAIN = "HevcLevel62Main"
    HEVCLEVEL62HIGH = "HevcLevel62High"

    allowable_values = [VIDEOLEVELNONE, VC1LEVELLOW, VC1LEVELMEDIUM, VC1LEVELHIGH, VC1LEVELL0, VC1LEVELL1, VC1LEVELL2, VC1LEVELL3, VC1LEVELL4, H264LEVEL10, H264LEVEL1B, H264LEVEL11, H264LEVEL12, H264LEVEL13, H264LEVEL20, H264LEVEL21, H264LEVEL22, H264LEVEL30, H264LEVEL31, H264LEVEL32, H264LEVEL40, H264LEVEL41, H264LEVEL42, H264LEVEL50, H264LEVEL51, MPEG2LEVELLOW, MPEG2LEVELMAIN, MPEG2LEVELHIGH1440, MPEG2LEVELHIGH, H264LEVEL52, HEVCLEVEL10MAIN, HEVCLEVEL20MAIN, HEVCLEVEL21MAIN, HEVCLEVEL30MAIN, HEVCLEVEL31MAIN, HEVCLEVEL40MAIN, HEVCLEVEL40HIGH, HEVCLEVEL41MAIN, HEVCLEVEL41HIGH, HEVCLEVEL50MAIN, HEVCLEVEL50HIGH, HEVCLEVEL51MAIN, HEVCLEVEL51HIGH, HEVCLEVEL52MAIN, HEVCLEVEL52HIGH, HEVCLEVEL60MAIN, HEVCLEVEL60HIGH, HEVCLEVEL61MAIN, HEVCLEVEL61HIGH, HEVCLEVEL62MAIN, HEVCLEVEL62HIGH]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """VideoLevelType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoLevelType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VideoLevelType):
            return True

        return self.to_dict() != other.to_dict()
