# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class IndexTableTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'edit_rate_num': 'int',
        'edit_rate_denom': 'int',
        'duration_min': 'int',
        'duration_max': 'int',
        'e_ubyte_count_min': 'int',
        'e_ubyte_count_max': 'int',
        'e_ubyte_count_constant': 'bool',
        'slice_count': 'int',
        'single_index_location': 'OptionalFlag',
        'single_essence_location': 'OptionalFlag',
        'forward_index_direction': 'OptionalFlag',
        'index_entry_array': 'OptionalFlag',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'edit_rate_num': 'edit_rate_num',
        'edit_rate_denom': 'edit_rate_denom',
        'duration_min': 'duration_min',
        'duration_max': 'duration_max',
        'e_ubyte_count_min': 'e_ubyte_count_min',
        'e_ubyte_count_max': 'e_ubyte_count_max',
        'e_ubyte_count_constant': 'e_ubyte_count_constant',
        'slice_count': 'slice_count',
        'single_index_location': 'single_index_location',
        'single_essence_location': 'single_essence_location',
        'forward_index_direction': 'forward_index_direction',
        'index_entry_array': 'index_entry_array',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, edit_rate_num=None, edit_rate_denom=None, duration_min=None, duration_max=None, e_ubyte_count_min=None, e_ubyte_count_max=None, e_ubyte_count_constant=None, slice_count=None, single_index_location=None, single_essence_location=None, forward_index_direction=None, index_entry_array=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """IndexTableTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._edit_rate_num = None
        self._edit_rate_denom = None
        self._duration_min = None
        self._duration_max = None
        self._e_ubyte_count_min = None
        self._e_ubyte_count_max = None
        self._e_ubyte_count_constant = None
        self._slice_count = None
        self._single_index_location = None
        self._single_essence_location = None
        self._forward_index_direction = None
        self._index_entry_array = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if edit_rate_num is not None:
            self.edit_rate_num = edit_rate_num
        if edit_rate_denom is not None:
            self.edit_rate_denom = edit_rate_denom
        if duration_min is not None:
            self.duration_min = duration_min
        if duration_max is not None:
            self.duration_max = duration_max
        if e_ubyte_count_min is not None:
            self.e_ubyte_count_min = e_ubyte_count_min
        if e_ubyte_count_max is not None:
            self.e_ubyte_count_max = e_ubyte_count_max
        if e_ubyte_count_constant is not None:
            self.e_ubyte_count_constant = e_ubyte_count_constant
        if slice_count is not None:
            self.slice_count = slice_count
        if single_index_location is not None:
            self.single_index_location = single_index_location
        if single_essence_location is not None:
            self.single_essence_location = single_essence_location
        if forward_index_direction is not None:
            self.forward_index_direction = forward_index_direction
        if index_entry_array is not None:
            self.index_entry_array = index_entry_array
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def edit_rate_num(self):
        """Gets the edit_rate_num of this IndexTableTest.  # noqa: E501


        :return: The edit_rate_num of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._edit_rate_num

    @edit_rate_num.setter
    def edit_rate_num(self, edit_rate_num):
        """Sets the edit_rate_num of this IndexTableTest.


        :param edit_rate_num: The edit_rate_num of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._edit_rate_num = edit_rate_num

    @property
    def edit_rate_denom(self):
        """Gets the edit_rate_denom of this IndexTableTest.  # noqa: E501


        :return: The edit_rate_denom of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._edit_rate_denom

    @edit_rate_denom.setter
    def edit_rate_denom(self, edit_rate_denom):
        """Sets the edit_rate_denom of this IndexTableTest.


        :param edit_rate_denom: The edit_rate_denom of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._edit_rate_denom = edit_rate_denom

    @property
    def duration_min(self):
        """Gets the duration_min of this IndexTableTest.  # noqa: E501


        :return: The duration_min of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._duration_min

    @duration_min.setter
    def duration_min(self, duration_min):
        """Sets the duration_min of this IndexTableTest.


        :param duration_min: The duration_min of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._duration_min = duration_min

    @property
    def duration_max(self):
        """Gets the duration_max of this IndexTableTest.  # noqa: E501


        :return: The duration_max of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._duration_max

    @duration_max.setter
    def duration_max(self, duration_max):
        """Sets the duration_max of this IndexTableTest.


        :param duration_max: The duration_max of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._duration_max = duration_max

    @property
    def e_ubyte_count_min(self):
        """Gets the e_ubyte_count_min of this IndexTableTest.  # noqa: E501


        :return: The e_ubyte_count_min of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._e_ubyte_count_min

    @e_ubyte_count_min.setter
    def e_ubyte_count_min(self, e_ubyte_count_min):
        """Sets the e_ubyte_count_min of this IndexTableTest.


        :param e_ubyte_count_min: The e_ubyte_count_min of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._e_ubyte_count_min = e_ubyte_count_min

    @property
    def e_ubyte_count_max(self):
        """Gets the e_ubyte_count_max of this IndexTableTest.  # noqa: E501


        :return: The e_ubyte_count_max of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._e_ubyte_count_max

    @e_ubyte_count_max.setter
    def e_ubyte_count_max(self, e_ubyte_count_max):
        """Sets the e_ubyte_count_max of this IndexTableTest.


        :param e_ubyte_count_max: The e_ubyte_count_max of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._e_ubyte_count_max = e_ubyte_count_max

    @property
    def e_ubyte_count_constant(self):
        """Gets the e_ubyte_count_constant of this IndexTableTest.  # noqa: E501


        :return: The e_ubyte_count_constant of this IndexTableTest.  # noqa: E501
        :rtype: bool
        """
        return self._e_ubyte_count_constant

    @e_ubyte_count_constant.setter
    def e_ubyte_count_constant(self, e_ubyte_count_constant):
        """Sets the e_ubyte_count_constant of this IndexTableTest.


        :param e_ubyte_count_constant: The e_ubyte_count_constant of this IndexTableTest.  # noqa: E501
        :type: bool
        """

        self._e_ubyte_count_constant = e_ubyte_count_constant

    @property
    def slice_count(self):
        """Gets the slice_count of this IndexTableTest.  # noqa: E501


        :return: The slice_count of this IndexTableTest.  # noqa: E501
        :rtype: int
        """
        return self._slice_count

    @slice_count.setter
    def slice_count(self, slice_count):
        """Sets the slice_count of this IndexTableTest.


        :param slice_count: The slice_count of this IndexTableTest.  # noqa: E501
        :type: int
        """

        self._slice_count = slice_count

    @property
    def single_index_location(self):
        """Gets the single_index_location of this IndexTableTest.  # noqa: E501


        :return: The single_index_location of this IndexTableTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._single_index_location

    @single_index_location.setter
    def single_index_location(self, single_index_location):
        """Sets the single_index_location of this IndexTableTest.


        :param single_index_location: The single_index_location of this IndexTableTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._single_index_location = single_index_location

    @property
    def single_essence_location(self):
        """Gets the single_essence_location of this IndexTableTest.  # noqa: E501


        :return: The single_essence_location of this IndexTableTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._single_essence_location

    @single_essence_location.setter
    def single_essence_location(self, single_essence_location):
        """Sets the single_essence_location of this IndexTableTest.


        :param single_essence_location: The single_essence_location of this IndexTableTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._single_essence_location = single_essence_location

    @property
    def forward_index_direction(self):
        """Gets the forward_index_direction of this IndexTableTest.  # noqa: E501


        :return: The forward_index_direction of this IndexTableTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._forward_index_direction

    @forward_index_direction.setter
    def forward_index_direction(self, forward_index_direction):
        """Sets the forward_index_direction of this IndexTableTest.


        :param forward_index_direction: The forward_index_direction of this IndexTableTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._forward_index_direction = forward_index_direction

    @property
    def index_entry_array(self):
        """Gets the index_entry_array of this IndexTableTest.  # noqa: E501


        :return: The index_entry_array of this IndexTableTest.  # noqa: E501
        :rtype: OptionalFlag
        """
        return self._index_entry_array

    @index_entry_array.setter
    def index_entry_array(self, index_entry_array):
        """Sets the index_entry_array of this IndexTableTest.


        :param index_entry_array: The index_entry_array of this IndexTableTest.  # noqa: E501
        :type: OptionalFlag
        """

        self._index_entry_array = index_entry_array

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this IndexTableTest.  # noqa: E501


        :return: The reject_on_error of this IndexTableTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this IndexTableTest.


        :param reject_on_error: The reject_on_error of this IndexTableTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this IndexTableTest.  # noqa: E501


        :return: The checked of this IndexTableTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this IndexTableTest.


        :param checked: The checked of this IndexTableTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexTableTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexTableTest):
            return True

        return self.to_dict() != other.to_dict()
