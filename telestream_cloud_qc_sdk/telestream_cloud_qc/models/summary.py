# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class Summary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_sync_events': 'int',
        'avsync_analysis': 'str',
        'avsync_inference': 'str',
        'confidence': 'float',
        'skew': 'int',
        'total_length': 'float'
    }

    attribute_map = {
        'num_sync_events': 'num_sync_events',
        'avsync_analysis': 'avsync_analysis',
        'avsync_inference': 'avsync_inference',
        'confidence': 'confidence',
        'skew': 'skew',
        'total_length': 'total_length'
    }

    def __init__(self, num_sync_events=None, avsync_analysis=None, avsync_inference=None, confidence=None, skew=None, total_length=None, local_vars_configuration=None):  # noqa: E501
        """Summary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_sync_events = None
        self._avsync_analysis = None
        self._avsync_inference = None
        self._confidence = None
        self._skew = None
        self._total_length = None
        self.discriminator = None

        if num_sync_events is not None:
            self.num_sync_events = num_sync_events
        if avsync_analysis is not None:
            self.avsync_analysis = avsync_analysis
        if avsync_inference is not None:
            self.avsync_inference = avsync_inference
        if confidence is not None:
            self.confidence = confidence
        if skew is not None:
            self.skew = skew
        if total_length is not None:
            self.total_length = total_length

    @property
    def num_sync_events(self):
        """Gets the num_sync_events of this Summary.  # noqa: E501

        Total number of synchronization detection events considered for summary.  # noqa: E501

        :return: The num_sync_events of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._num_sync_events

    @num_sync_events.setter
    def num_sync_events(self, num_sync_events):
        """Sets the num_sync_events of this Summary.

        Total number of synchronization detection events considered for summary.  # noqa: E501

        :param num_sync_events: The num_sync_events of this Summary.  # noqa: E501
        :type: int
        """

        self._num_sync_events = num_sync_events

    @property
    def avsync_analysis(self):
        """Gets the avsync_analysis of this Summary.  # noqa: E501


        :return: The avsync_analysis of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._avsync_analysis

    @avsync_analysis.setter
    def avsync_analysis(self, avsync_analysis):
        """Sets the avsync_analysis of this Summary.


        :param avsync_analysis: The avsync_analysis of this Summary.  # noqa: E501
        :type: str
        """

        self._avsync_analysis = avsync_analysis

    @property
    def avsync_inference(self):
        """Gets the avsync_inference of this Summary.  # noqa: E501


        :return: The avsync_inference of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._avsync_inference

    @avsync_inference.setter
    def avsync_inference(self, avsync_inference):
        """Sets the avsync_inference of this Summary.


        :param avsync_inference: The avsync_inference of this Summary.  # noqa: E501
        :type: str
        """

        self._avsync_inference = avsync_inference

    @property
    def confidence(self):
        """Gets the confidence of this Summary.  # noqa: E501

        Confidence of avsync_inference and avsync_analysis. 'confidence' is a value between 0 and 100. confidence >= 90  - Very high confidence. 80 <= confidence < 90   - High confidence. 70 <= confidence < 80   - Should be reviewed by human.   # noqa: E501

        :return: The confidence of this Summary.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Summary.

        Confidence of avsync_inference and avsync_analysis. 'confidence' is a value between 0 and 100. confidence >= 90  - Very high confidence. 80 <= confidence < 90   - High confidence. 70 <= confidence < 80   - Should be reviewed by human.   # noqa: E501

        :param confidence: The confidence of this Summary.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def skew(self):
        """Gets the skew of this Summary.  # noqa: E501

        Skew estimate in #frames; Skew is the number of frames that audio is delayed to the video  # noqa: E501

        :return: The skew of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._skew

    @skew.setter
    def skew(self, skew):
        """Sets the skew of this Summary.

        Skew estimate in #frames; Skew is the number of frames that audio is delayed to the video  # noqa: E501

        :param skew: The skew of this Summary.  # noqa: E501
        :type: int
        """

        self._skew = skew

    @property
    def total_length(self):
        """Gets the total_length of this Summary.  # noqa: E501


        :return: The total_length of this Summary.  # noqa: E501
        :rtype: float
        """
        return self._total_length

    @total_length.setter
    def total_length(self, total_length):
        """Sets the total_length of this Summary.


        :param total_length: The total_length of this Summary.  # noqa: E501
        :type: float
        """

        self._total_length = total_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Summary):
            return True

        return self.to_dict() != other.to_dict()
