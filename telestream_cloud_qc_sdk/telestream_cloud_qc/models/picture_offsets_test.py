# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class PictureOffsetsTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stored_ftwo': 'int',
        'display_ftwo': 'int',
        'sampled_x': 'int',
        'sampled_y': 'int',
        'display_x': 'int',
        'display_y': 'int',
        'image_start': 'int',
        'image_end': 'int',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'stored_ftwo': 'stored_ftwo',
        'display_ftwo': 'display_ftwo',
        'sampled_x': 'sampled_x',
        'sampled_y': 'sampled_y',
        'display_x': 'display_x',
        'display_y': 'display_y',
        'image_start': 'image_start',
        'image_end': 'image_end',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, stored_ftwo=None, display_ftwo=None, sampled_x=None, sampled_y=None, display_x=None, display_y=None, image_start=None, image_end=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """PictureOffsetsTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._stored_ftwo = None
        self._display_ftwo = None
        self._sampled_x = None
        self._sampled_y = None
        self._display_x = None
        self._display_y = None
        self._image_start = None
        self._image_end = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if stored_ftwo is not None:
            self.stored_ftwo = stored_ftwo
        if display_ftwo is not None:
            self.display_ftwo = display_ftwo
        if sampled_x is not None:
            self.sampled_x = sampled_x
        if sampled_y is not None:
            self.sampled_y = sampled_y
        if display_x is not None:
            self.display_x = display_x
        if display_y is not None:
            self.display_y = display_y
        if image_start is not None:
            self.image_start = image_start
        if image_end is not None:
            self.image_end = image_end
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def stored_ftwo(self):
        """Gets the stored_ftwo of this PictureOffsetsTest.  # noqa: E501


        :return: The stored_ftwo of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._stored_ftwo

    @stored_ftwo.setter
    def stored_ftwo(self, stored_ftwo):
        """Sets the stored_ftwo of this PictureOffsetsTest.


        :param stored_ftwo: The stored_ftwo of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._stored_ftwo = stored_ftwo

    @property
    def display_ftwo(self):
        """Gets the display_ftwo of this PictureOffsetsTest.  # noqa: E501


        :return: The display_ftwo of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._display_ftwo

    @display_ftwo.setter
    def display_ftwo(self, display_ftwo):
        """Sets the display_ftwo of this PictureOffsetsTest.


        :param display_ftwo: The display_ftwo of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._display_ftwo = display_ftwo

    @property
    def sampled_x(self):
        """Gets the sampled_x of this PictureOffsetsTest.  # noqa: E501


        :return: The sampled_x of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._sampled_x

    @sampled_x.setter
    def sampled_x(self, sampled_x):
        """Sets the sampled_x of this PictureOffsetsTest.


        :param sampled_x: The sampled_x of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._sampled_x = sampled_x

    @property
    def sampled_y(self):
        """Gets the sampled_y of this PictureOffsetsTest.  # noqa: E501


        :return: The sampled_y of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._sampled_y

    @sampled_y.setter
    def sampled_y(self, sampled_y):
        """Sets the sampled_y of this PictureOffsetsTest.


        :param sampled_y: The sampled_y of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._sampled_y = sampled_y

    @property
    def display_x(self):
        """Gets the display_x of this PictureOffsetsTest.  # noqa: E501


        :return: The display_x of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._display_x

    @display_x.setter
    def display_x(self, display_x):
        """Sets the display_x of this PictureOffsetsTest.


        :param display_x: The display_x of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._display_x = display_x

    @property
    def display_y(self):
        """Gets the display_y of this PictureOffsetsTest.  # noqa: E501


        :return: The display_y of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._display_y

    @display_y.setter
    def display_y(self, display_y):
        """Sets the display_y of this PictureOffsetsTest.


        :param display_y: The display_y of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._display_y = display_y

    @property
    def image_start(self):
        """Gets the image_start of this PictureOffsetsTest.  # noqa: E501


        :return: The image_start of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._image_start

    @image_start.setter
    def image_start(self, image_start):
        """Sets the image_start of this PictureOffsetsTest.


        :param image_start: The image_start of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._image_start = image_start

    @property
    def image_end(self):
        """Gets the image_end of this PictureOffsetsTest.  # noqa: E501


        :return: The image_end of this PictureOffsetsTest.  # noqa: E501
        :rtype: int
        """
        return self._image_end

    @image_end.setter
    def image_end(self, image_end):
        """Sets the image_end of this PictureOffsetsTest.


        :param image_end: The image_end of this PictureOffsetsTest.  # noqa: E501
        :type: int
        """

        self._image_end = image_end

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this PictureOffsetsTest.  # noqa: E501


        :return: The reject_on_error of this PictureOffsetsTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this PictureOffsetsTest.


        :param reject_on_error: The reject_on_error of this PictureOffsetsTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this PictureOffsetsTest.  # noqa: E501


        :return: The checked of this PictureOffsetsTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this PictureOffsetsTest.


        :param checked: The checked of this PictureOffsetsTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PictureOffsetsTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PictureOffsetsTest):
            return True

        return self.to_dict() != other.to_dict()
