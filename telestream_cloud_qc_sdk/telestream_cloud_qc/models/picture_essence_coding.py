# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class PictureEssenceCoding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AVCI_50_1080_60_I = "AVCI-50-1080-60-I"
    AVCI_50_1080_50_I = "AVCI-50-1080-50-I"
    AVCI_50_1080_30_P = "AVCI-50-1080-30-P"
    AVCI_50_1080_25_P = "AVCI-50-1080-25-P"
    AVCI_50_720_60_P = "AVCI-50-720-60-P"
    AVCI_50_720_50_P = "AVCI-50-720-50-P"
    AVCI_100_1080_60_I = "AVCI-100-1080-60-I"
    AVCI_100_1080_50_I = "AVCI-100-1080-50-I"
    AVCI_100_1080_30_P = "AVCI-100-1080-30-P"
    AVCI_100_1080_25_P = "AVCI-100-1080-25-P"
    AVCI_100_720_60_P = "AVCI-100-720-60-P"
    AVCI_100_720_50_P = "AVCI-100-720-50-P"
    AVC_HIGH_10_INTRA_UNCS = "AVC-HIGH-10-INTRA-UNCS"
    AVC_HIGH_422_INTRA_UNCS = "AVC-HIGH-422-INTRA-UNCS"
    MPEG2_MP_HL_LONGGOP = "MPEG2-MP-HL-LONGGOP"
    MPEG2_422P_HL_LONGGOP = "MPEG2-422P-HL-LONGGOP"
    MPEG2_MP_H14_LONGGOP = "MPEG2-MP-H14-LONGGOP"
    D10_50_625_50 = "D10-50-625-50"
    D10_50_525_60 = "D10-50-525-60"
    D10_40_625_50 = "D10-40-625-50"
    D10_40_525_60 = "D10-40-525-60"
    D10_30_625_50 = "D10-30-625-50"
    D10_30_525_60 = "D10-30-525-60"

    allowable_values = [AVCI_50_1080_60_I, AVCI_50_1080_50_I, AVCI_50_1080_30_P, AVCI_50_1080_25_P, AVCI_50_720_60_P, AVCI_50_720_50_P, AVCI_100_1080_60_I, AVCI_100_1080_50_I, AVCI_100_1080_30_P, AVCI_100_1080_25_P, AVCI_100_720_60_P, AVCI_100_720_50_P, AVC_HIGH_10_INTRA_UNCS, AVC_HIGH_422_INTRA_UNCS, MPEG2_MP_HL_LONGGOP, MPEG2_422P_HL_LONGGOP, MPEG2_MP_H14_LONGGOP, D10_50_625_50, D10_50_525_60, D10_40_625_50, D10_40_525_60, D10_30_625_50, D10_30_525_60]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """PictureEssenceCoding - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PictureEssenceCoding):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PictureEssenceCoding):
            return True

        return self.to_dict() != other.to_dict()
