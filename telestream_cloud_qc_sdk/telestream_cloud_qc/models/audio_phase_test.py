# coding: utf-8

"""
    Qc API

    Qc API  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.configuration import Configuration


class AudioPhaseTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'minimum_phase_enabled': 'bool',
        'minimum_phase': 'float',
        'mean_phase_enabled': 'bool',
        'mean_phase': 'float',
        'max_mean_phase_enabled': 'bool',
        'max_mean_phase': 'float',
        'channels': 'Channels',
        'reject_on_error': 'bool',
        'checked': 'bool'
    }

    attribute_map = {
        'minimum_phase_enabled': 'minimum_phase_enabled',
        'minimum_phase': 'minimum_phase',
        'mean_phase_enabled': 'mean_phase_enabled',
        'mean_phase': 'mean_phase',
        'max_mean_phase_enabled': 'max_mean_phase_enabled',
        'max_mean_phase': 'max_mean_phase',
        'channels': 'channels',
        'reject_on_error': 'reject_on_error',
        'checked': 'checked'
    }

    def __init__(self, minimum_phase_enabled=None, minimum_phase=None, mean_phase_enabled=None, mean_phase=None, max_mean_phase_enabled=None, max_mean_phase=None, channels=None, reject_on_error=None, checked=None, local_vars_configuration=None):  # noqa: E501
        """AudioPhaseTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._minimum_phase_enabled = None
        self._minimum_phase = None
        self._mean_phase_enabled = None
        self._mean_phase = None
        self._max_mean_phase_enabled = None
        self._max_mean_phase = None
        self._channels = None
        self._reject_on_error = None
        self._checked = None
        self.discriminator = None

        if minimum_phase_enabled is not None:
            self.minimum_phase_enabled = minimum_phase_enabled
        if minimum_phase is not None:
            self.minimum_phase = minimum_phase
        if mean_phase_enabled is not None:
            self.mean_phase_enabled = mean_phase_enabled
        if mean_phase is not None:
            self.mean_phase = mean_phase
        if max_mean_phase_enabled is not None:
            self.max_mean_phase_enabled = max_mean_phase_enabled
        if max_mean_phase is not None:
            self.max_mean_phase = max_mean_phase
        if channels is not None:
            self.channels = channels
        if reject_on_error is not None:
            self.reject_on_error = reject_on_error
        if checked is not None:
            self.checked = checked

    @property
    def minimum_phase_enabled(self):
        """Gets the minimum_phase_enabled of this AudioPhaseTest.  # noqa: E501


        :return: The minimum_phase_enabled of this AudioPhaseTest.  # noqa: E501
        :rtype: bool
        """
        return self._minimum_phase_enabled

    @minimum_phase_enabled.setter
    def minimum_phase_enabled(self, minimum_phase_enabled):
        """Sets the minimum_phase_enabled of this AudioPhaseTest.


        :param minimum_phase_enabled: The minimum_phase_enabled of this AudioPhaseTest.  # noqa: E501
        :type: bool
        """

        self._minimum_phase_enabled = minimum_phase_enabled

    @property
    def minimum_phase(self):
        """Gets the minimum_phase of this AudioPhaseTest.  # noqa: E501


        :return: The minimum_phase of this AudioPhaseTest.  # noqa: E501
        :rtype: float
        """
        return self._minimum_phase

    @minimum_phase.setter
    def minimum_phase(self, minimum_phase):
        """Sets the minimum_phase of this AudioPhaseTest.


        :param minimum_phase: The minimum_phase of this AudioPhaseTest.  # noqa: E501
        :type: float
        """

        self._minimum_phase = minimum_phase

    @property
    def mean_phase_enabled(self):
        """Gets the mean_phase_enabled of this AudioPhaseTest.  # noqa: E501


        :return: The mean_phase_enabled of this AudioPhaseTest.  # noqa: E501
        :rtype: bool
        """
        return self._mean_phase_enabled

    @mean_phase_enabled.setter
    def mean_phase_enabled(self, mean_phase_enabled):
        """Sets the mean_phase_enabled of this AudioPhaseTest.


        :param mean_phase_enabled: The mean_phase_enabled of this AudioPhaseTest.  # noqa: E501
        :type: bool
        """

        self._mean_phase_enabled = mean_phase_enabled

    @property
    def mean_phase(self):
        """Gets the mean_phase of this AudioPhaseTest.  # noqa: E501


        :return: The mean_phase of this AudioPhaseTest.  # noqa: E501
        :rtype: float
        """
        return self._mean_phase

    @mean_phase.setter
    def mean_phase(self, mean_phase):
        """Sets the mean_phase of this AudioPhaseTest.


        :param mean_phase: The mean_phase of this AudioPhaseTest.  # noqa: E501
        :type: float
        """

        self._mean_phase = mean_phase

    @property
    def max_mean_phase_enabled(self):
        """Gets the max_mean_phase_enabled of this AudioPhaseTest.  # noqa: E501


        :return: The max_mean_phase_enabled of this AudioPhaseTest.  # noqa: E501
        :rtype: bool
        """
        return self._max_mean_phase_enabled

    @max_mean_phase_enabled.setter
    def max_mean_phase_enabled(self, max_mean_phase_enabled):
        """Sets the max_mean_phase_enabled of this AudioPhaseTest.


        :param max_mean_phase_enabled: The max_mean_phase_enabled of this AudioPhaseTest.  # noqa: E501
        :type: bool
        """

        self._max_mean_phase_enabled = max_mean_phase_enabled

    @property
    def max_mean_phase(self):
        """Gets the max_mean_phase of this AudioPhaseTest.  # noqa: E501


        :return: The max_mean_phase of this AudioPhaseTest.  # noqa: E501
        :rtype: float
        """
        return self._max_mean_phase

    @max_mean_phase.setter
    def max_mean_phase(self, max_mean_phase):
        """Sets the max_mean_phase of this AudioPhaseTest.


        :param max_mean_phase: The max_mean_phase of this AudioPhaseTest.  # noqa: E501
        :type: float
        """

        self._max_mean_phase = max_mean_phase

    @property
    def channels(self):
        """Gets the channels of this AudioPhaseTest.  # noqa: E501


        :return: The channels of this AudioPhaseTest.  # noqa: E501
        :rtype: Channels
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this AudioPhaseTest.


        :param channels: The channels of this AudioPhaseTest.  # noqa: E501
        :type: Channels
        """

        self._channels = channels

    @property
    def reject_on_error(self):
        """Gets the reject_on_error of this AudioPhaseTest.  # noqa: E501


        :return: The reject_on_error of this AudioPhaseTest.  # noqa: E501
        :rtype: bool
        """
        return self._reject_on_error

    @reject_on_error.setter
    def reject_on_error(self, reject_on_error):
        """Sets the reject_on_error of this AudioPhaseTest.


        :param reject_on_error: The reject_on_error of this AudioPhaseTest.  # noqa: E501
        :type: bool
        """

        self._reject_on_error = reject_on_error

    @property
    def checked(self):
        """Gets the checked of this AudioPhaseTest.  # noqa: E501


        :return: The checked of this AudioPhaseTest.  # noqa: E501
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this AudioPhaseTest.


        :param checked: The checked of this AudioPhaseTest.  # noqa: E501
        :type: bool
        """

        self._checked = checked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioPhaseTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudioPhaseTest):
            return True

        return self.to_dict() != other.to_dict()
