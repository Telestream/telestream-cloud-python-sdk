# coding: utf-8

"""
    Flip API

    Description

    OpenAPI spec version: 3.1.0
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import telestream_cloud_flip
from telestream_cloud_flip.rest import ApiException
from telestream_cloud_flip.apis.flip_api import FlipApi


class TestFlipApi(unittest.TestCase):
    """ FlipApi unit test stubs """

    def setUp(self):
        self.api = telestream_cloud_flip.apis.flip_api.FlipApi()

    def tearDown(self):
        pass

    def test_cancel_encoding(self):
        """
        Test case for cancel_encoding

        Cancels an Encoding.
        """
        pass

    def test_copy_profile(self):
        """
        Test case for copy_profile

        Copies a given Profile
        """
        pass

    def test_create_encoding(self):
        """
        Test case for create_encoding

        Creates an Encoding
        """
        pass

    def test_create_factory(self):
        """
        Test case for create_factory

        Creates a new factory
        """
        pass

    def test_create_profile(self):
        """
        Test case for create_profile

        Creates a Profile
        """
        pass

    def test_create_workorder(self):
        """
        Test case for create_workorder

        Creates a Workorder.
        """
        pass

    def test_delete_encoding(self):
        """
        Test case for delete_encoding

        Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
        """
        pass

    def test_delete_profile(self):
        """
        Test case for delete_profile

        Deletes a given Profile
        """
        pass

    def test_delete_video(self):
        """
        Test case for delete_video

        Deletes a Video object.
        """
        pass

    def test_delete_video_source(self):
        """
        Test case for delete_video_source

        Delete a video's source file.
        """
        pass

    def test_encoding(self):
        """
        Test case for encoding

        Returns an Encoding object.
        """
        pass

    def test_encodings(self):
        """
        Test case for encodings

        Returns a list of Encoding objects
        """
        pass

    def test_encodings_count(self):
        """
        Test case for encodings_count

        Returns a number of Encoding objects created using a given factory.
        """
        pass

    def test_factories(self):
        """
        Test case for factories

        Returns a collection of Factory objects.
        """
        pass

    def test_factory(self):
        """
        Test case for factory

        Returns a Factory object.
        """
        pass

    def test_notifications(self):
        """
        Test case for notifications

        Returns a Factory's notification settings.
        """
        pass

    def test_profile(self):
        """
        Test case for profile

        Returns a Profile object.
        """
        pass

    def test_profile_encodings(self):
        """
        Test case for profile_encodings

        Returns a list of Encodings that belong to a Profile.
        """
        pass

    def test_profiles(self):
        """
        Test case for profiles

        Returns a collection of Profile objects.
        """
        pass

    def test_queued_videos(self):
        """
        Test case for queued_videos

        Returns a collection of Video objects queued for encoding.
        """
        pass

    def test_resubmit_video(self):
        """
        Test case for resubmit_video

        Resubmits a video to encode.
        """
        pass

    def test_retry_encoding(self):
        """
        Test case for retry_encoding

        Retries a failed encoding.
        """
        pass

    def test_signed_encoding_url(self):
        """
        Test case for signed_encoding_url

        Returns a signed url pointing to an Encoding.
        """
        pass

    def test_signed_encoding_urls(self):
        """
        Test case for signed_encoding_urls

        Returns a list of signed urls pointing to an Encoding's outputs.
        """
        pass

    def test_signed_video_url(self):
        """
        Test case for signed_video_url

        Returns a signed url pointing to a Video.
        """
        pass

    def test_toggle_factory_sync(self):
        """
        Test case for toggle_factory_sync

        Toggles synchronisation settings.
        """
        pass

    def test_update_encoding(self):
        """
        Test case for update_encoding

        Updates an Encoding
        """
        pass

    def test_update_factory(self):
        """
        Test case for update_factory

        Updates a Factory's settings. Returns a Factory object.
        """
        pass

    def test_update_notifications(self):
        """
        Test case for update_notifications

        Updates a Factory's notification settings.
        """
        pass

    def test_update_profile(self):
        """
        Test case for update_profile

        Updates a given Profile
        """
        pass

    def test_upload_video(self):
        """
        Test case for upload_video

        Creates an upload session.
        """
        pass

    def test_video(self):
        """
        Test case for video

        Returns a Video object.
        """
        pass

    def test_video_encodings(self):
        """
        Test case for video_encodings

        Returns a list of Encodings that belong to a Video.
        """
        pass

    def test_video_metadata(self):
        """
        Test case for video_metadata

        Returns a Video's metadata
        """
        pass

    def test_videos(self):
        """
        Test case for videos

        Returns a collection of Video objects.
        """
        pass

    def test_workflows(self):
        """
        Test case for workflows

        Returns a collection of Workflows that belong to a Factory.
        """
        pass


if __name__ == '__main__':
    unittest.main()
